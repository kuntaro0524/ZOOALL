#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Sun Jul 25 21:11:35 2010
import wx
import sys
import traceback
sys.path.append("/isilon/BL32XU/BLsoft/PPPP/")
sys.path.append("/isilon/BL32XU/BLsoft/Other/RADDOSE")
import datetime
import AttFactor
import BeamsizeConfig
from Gonio import *
from Att import *
from GonioVec import *
from Light import *
from Colli import *
from File import *
from BS import *
from Cryo import *
from ScheduleBSS_HS import *
from KUMAtune import *
from RDprop import *
from MyException import *
from Raddose import *
from Mono import *
from MultiCrystalZoo import *
from wxPython.wx import *
import kuma_shika_commu
from Morning import q315r_workaround
#
# 2013/10/11 temporally adopted MX225HS low noise mode
#

class MyMenuBar(wx.MenuBar):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyMenuBar.__init__
        wx.MenuBar.__init__(self, *args, **kwds)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyMenuBar.__set_properties
        pass
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyMenuBar.__do_layout
        pass
        # end wxGlade

# end of class MyMenuBar


class MyPanel(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyPanel.__init__
        kwds["style"] = wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyPanel.__set_properties
        pass
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyPanel.__do_layout
        self.Layout()
        # end wxGlade

# end of class MyPanel


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("frame_1")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_26 = wx.BoxSizer(wx.VERTICAL)
        self.SetSizer(sizer_26)
        sizer_26.Fit(self)
        self.Layout()
        # end wxGlade

# end of class MyFrame


class ExpCondDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ExpCondDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.label_5 = wx.StaticText(self, wx.ID_ANY, "Directory", style=wx.ALIGN_CENTER)
        self.text_ctrl_1 = wx.TextCtrl(self, wx.ID_ANY, "")
        self.label_5_copy = wx.StaticText(self, wx.ID_ANY, "Data name", style=wx.ALIGN_CENTER)
        self.text_ctrl_1_copy = wx.TextCtrl(self, wx.ID_ANY, "")
        self.label_5_copy_copy = wx.StaticText(self, wx.ID_ANY, "Start serial", style=wx.ALIGN_CENTER)
        self.text_ctrl_1_copy_copy = wx.TextCtrl(self, wx.ID_ANY, "")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: ExpCondDialog.__set_properties
        self.SetTitle("dialog_1")
        self.label_5.SetMinSize((100, 18))
        self.text_ctrl_1.SetMinSize((200, 25))
        self.label_5_copy.SetMinSize((100, 25))
        self.text_ctrl_1_copy.SetMinSize((100, 25))
        self.label_5_copy_copy.SetMinSize((74, 18))
        self.text_ctrl_1_copy_copy.SetMinSize((100, 25))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ExpCondDialog.__do_layout
        sizer_14 = wx.BoxSizer(wx.VERTICAL)
        sizer_16_copy_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_16 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_16.Add(self.label_5, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_16.Add(self.text_ctrl_1, 0, 0, 0)
        sizer_14.Add(sizer_16, 0, wx.EXPAND, 0)
        sizer_16_copy_4.Add(self.label_5_copy, 0, wx.ALIGN_CENTER, 0)
        sizer_16_copy_4.Add(self.text_ctrl_1_copy, 0, 0, 0)
        sizer_16_copy_4.Add(self.label_5_copy_copy, 0, wx.ALIGN_CENTER, 0)
        sizer_16_copy_4.Add(self.text_ctrl_1_copy_copy, 0, 0, 0)
        sizer_14.Add(sizer_16_copy_4, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_14)
        sizer_14.Fit(self)
        self.Layout()
        # end wxGlade

# end of class ExpCondDialog

class MyFrame2(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame2.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.notebook_1 = wx.Notebook(self, wx.ID_ANY)
        self.notebook_1_pane_1 = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.label_4_copy = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, "Gonio XYZ")
        self.button_1_copy = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, "UP")
        self.button_1 = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, "LEFT")
        self.distBox = wx.ComboBox(self.notebook_1_pane_1, wx.ID_ANY, choices=["1000", "500", "200", "100", "50", "20", "10", "5", "2", "1", "0.5"], style=wx.CB_DROPDOWN)
        self.label_2 = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, "[um]")
        self.button_1_copy_2 = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, "RIGHT")
        self.button_1_copy_1 = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, "DOWN")
        self.button_2 = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, "Far")
        self.label_3 = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, "Pint")
        self.button_2_copy = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, "Near")
        self.label_4 = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, "Gonio rotation[deg.]")
        self.button_3 = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, "+180")
        self.button_3_copy_copy = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, "+90")
        self.button_3_copy = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, "[+]")
        self.phiBox = wx.ComboBox(self.notebook_1_pane_1, wx.ID_ANY, choices=["5", "10", "30", "45", "360"], style=wx.CB_DROPDOWN)
        self.button_3_copy_1 = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, "[-]")
        self.button_3_copy_copy_1 = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, "-90")
        self.button_3_copy_2 = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, "-180")
        self.label_7 = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, "Current status")
        self.label_6 = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, "GonioX")
        self.currGonioX = wx.TextCtrl(self.notebook_1_pane_1, wx.ID_ANY, "", style=wx.TE_READONLY)
        self.label_6_copy_4 = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, "[mm]")
        self.label_6_copy = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, "GonioY")
        self.currGonioY = wx.TextCtrl(self.notebook_1_pane_1, wx.ID_ANY, "", style=wx.TE_READONLY)
        self.label_6_copy_4_copy = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, "[mm]")
        self.label_6_copy_1 = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, "GonioZ")
        self.currGonioZ = wx.TextCtrl(self.notebook_1_pane_1, wx.ID_ANY, "", style=wx.TE_READONLY)
        self.label_6_copy_4_copy_1 = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, "[mm]")
        self.label_6_copy_2 = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, "GonioZZ")
        self.currGonioZZ = wx.TextCtrl(self.notebook_1_pane_1, wx.ID_ANY, "", style=wx.TE_READONLY)
        self.label_6_copy_4_copy_2 = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, "[mm]")
        self.label_6_copy_3 = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, "PHI")
        self.currPhi = wx.TextCtrl(self.notebook_1_pane_1, wx.ID_ANY, "", style=wx.TE_READONLY)
        self.label_6_copy_4_copy_3 = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, "[deg.]")
        self.button_5 = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, "Update")
        self.label_7_copy = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, "Device control")
        self.button_4 = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, "Centering")
        self.button_8 = wx.ToggleButton(self.notebook_1_pane_1, wx.ID_ANY, "Light down")
        self.checkbox_2 = wx.CheckBox(self.notebook_1_pane_1, wx.ID_ANY, "with Cryo-Z [Evac]")
        self.checkbox_2_copy = wx.CheckBox(self.notebook_1_pane_1, wx.ID_ANY, "with Back Light[Evac]")
        self.evacManual = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, "Evacuate [manual mount]")
        self.bitmap_1 = wx.StaticBitmap(self.notebook_1_pane_1, wx.ID_ANY, wx.Bitmap("/isilon/BL32XU/BLsoft/PPPP/03.GUI/98.Factory/Honki/a.png", wx.BITMAP_TYPE_ANY))
        self.panel_1 = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.label_17 = wx.StaticText(self.panel_1, wx.ID_ANY, "Dose estimation with RADDOSE (Exposure=1.0 sec)", style=wx.ALIGN_CENTER)
        self.label_12_copy = wx.StaticText(self.panel_1, wx.ID_ANY, "Cell", style=wx.ALIGN_CENTER)
        self.dCellBox = wx.TextCtrl(self.panel_1, wx.ID_ANY, "78 36 36 90 90 90", style=wx.TE_CENTRE)
        self.label_12_copy_4 = wx.StaticText(self.panel_1, wx.ID_ANY, "[a b c alpha beta gamma] ", style=wx.ALIGN_CENTER)
        self.label_12_copy_1 = wx.StaticText(self.panel_1, wx.ID_ANY, "# of residues", style=wx.ALIGN_CENTER)
        self.dNresBox = wx.TextCtrl(self.panel_1, wx.ID_ANY, "129", style=wx.TE_CENTRE)
        self.label_12_copy_5 = wx.StaticText(self.panel_1, wx.ID_ANY, "[AA] (Integer)", style=wx.ALIGN_CENTER)
        self.label_12_copy_2 = wx.StaticText(self.panel_1, wx.ID_ANY, "# of molecules in unit cell", style=wx.ALIGN_CENTER)
        self.dNchainsBox = wx.TextCtrl(self.panel_1, wx.ID_ANY, "8", style=wx.TE_CENTRE)
        self.label_12_copy_6 = wx.StaticText(self.panel_1, wx.ID_ANY, "[chains]", style=wx.ALIGN_CENTER)
        self.label_12_copy_2_copy_copy_copy_copy_1 = wx.StaticText(self.panel_1, wx.ID_ANY, "Solvent Fraction", style=wx.ALIGN_CENTER)
        self.dSolventFractionBox = wx.TextCtrl(self.panel_1, wx.ID_ANY, "38", style=wx.TE_CENTRE)
        self.label_12_copy_6_copy_copy_copy_copy_1 = wx.StaticText(self.panel_1, wx.ID_ANY, "[%]", style=wx.ALIGN_CENTER)
        self.label_12_copy_2_copy = wx.StaticText(self.panel_1, wx.ID_ANY, "# of HA atoms in a monomer", style=wx.ALIGN_CENTER)
        self.dHABox = wx.TextCtrl(self.panel_1, wx.ID_ANY, "Fe 2 Cu 2", style=wx.TE_CENTRE)
        self.label_12_copy_6_copy = wx.StaticText(self.panel_1, wx.ID_ANY, "[HA1 NUM1 HA2 NUM2....] ", style=wx.ALIGN_CENTER)
        self.label_12_copy_2_copy_copy = wx.StaticText(self.panel_1, wx.ID_ANY, "Ion concentration", style=wx.ALIGN_CENTER)
        self.dIonBox = wx.TextCtrl(self.panel_1, wx.ID_ANY, "Na 1500 Cl 1500", style=wx.TE_CENTRE)
        self.label_12_copy_6_copy_copy = wx.StaticText(self.panel_1, wx.ID_ANY, "[ION1 CONCENTRATION1 ION2...] ", style=wx.ALIGN_CENTER)
        self.label_12_copy_2_copy_copy_copy = wx.StaticText(self.panel_1, wx.ID_ANY, "Crystal dimensions", style=wx.ALIGN_CENTER)
        self.dCrySizeBox = wx.TextCtrl(self.panel_1, wx.ID_ANY, "100x100x100", style=wx.TE_CENTRE)
        self.label_12_copy_6_copy_copy_copy = wx.StaticText(self.panel_1, wx.ID_ANY, "[H x V x Depth] [um]", style=wx.ALIGN_CENTER)
        self.label_12_copy_2_copy_copy_copy_copy = wx.StaticText(self.panel_1, wx.ID_ANY, "Beam size", style=wx.ALIGN_CENTER)
        self.dBeamSizeBox = wx.TextCtrl(self.panel_1, wx.ID_ANY, "1 x 10", style=wx.TE_CENTRE)
        self.label_12_copy_6_copy_copy_copy_copy = wx.StaticText(self.panel_1, wx.ID_ANY, "[H x V] (um^2)", style=wx.ALIGN_CENTER)
        self.label_12_copy_2_copy_copy_copy_copy_copy = wx.StaticText(self.panel_1, wx.ID_ANY, "Photon flux", style=wx.ALIGN_CENTER)
        self.dFluxBox = wx.TextCtrl(self.panel_1, wx.ID_ANY, "4E11", style=wx.TE_CENTRE)
        self.label_12_copy_6_copy_copy_copy_copy_copy = wx.StaticText(self.panel_1, wx.ID_ANY, "[phs/sec] (full flux)", style=wx.ALIGN_CENTER)
        self.label_10 = wx.StaticText(self.panel_1, wx.ID_ANY, "Wavelength", style=wx.ALIGN_CENTER)
        self.dWLBox = wx.TextCtrl(self.panel_1, wx.ID_ANY, "1.0", style=wx.TE_CENTRE)
        self.label_12_copy_6_copy_copy_copy_copy_copy_copy = wx.StaticText(self.panel_1, wx.ID_ANY, "[Angstrome]", style=wx.ALIGN_CENTER)
        self.static_line_3 = wx.StaticLine(self.panel_1, wx.ID_ANY)
        self.label_12 = wx.StaticText(self.panel_1, wx.ID_ANY, "")
        self.dResetConditionButton = wx.Button(self.panel_1, wx.ID_ANY, "Reset conditions")
        self.dDoseEstimationButton = wx.Button(self.panel_1, wx.ID_ANY, "Dose estimation")
        self.label_14 = wx.StaticText(self.panel_1, wx.ID_ANY, "Dose/frame", style=wx.ALIGN_CENTER)
        self.label_14_copy = wx.StaticText(self.panel_1, wx.ID_ANY, "Abs. coeff.", style=wx.ALIGN_CENTER)
        self.label_14_copy_1 = wx.StaticText(self.panel_1, wx.ID_ANY, "Temp. rise", style=wx.ALIGN_CENTER)
        self.label_14_copy_2 = wx.StaticText(self.panel_1, wx.ID_ANY, "To Henderson Limit", style=wx.ALIGN_CENTER)
        self.label_14_copy_7 = wx.StaticText(self.panel_1, wx.ID_ANY, "Desired", style=wx.ALIGN_CENTER)
        self.label_14_copy_7_copy = wx.StaticText(self.panel_1, wx.ID_ANY, "Max RD fac.", style=wx.ALIGN_CENTER)
        self.label_14_copy_7_copy_copy = wx.StaticText(self.panel_1, wx.ID_ANY, "AttFactor", style=wx.ALIGN_CENTER)
        self.dDoseDisp = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_CENTRE)
        self.dAbsDisp = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_CENTRE)
        self.dTempRiseDisp = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_CENTRE)
        self.toHendersonLimitBox = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_CENTRE)
        self.dDesiredDoseBox = wx.TextCtrl(self.panel_1, wx.ID_ANY, "10.0", style=wx.TE_CENTRE)
        self.dMaxRDBox = wx.TextCtrl(self.panel_1, wx.ID_ANY, "3.5", style=wx.TE_CENTRE)
        self.dAttFactorBox = wx.TextCtrl(self.panel_1, wx.ID_ANY, "1.0", style=wx.TE_CENTRE)
        self.label_14_copy_3 = wx.StaticText(self.panel_1, wx.ID_ANY, "[MGy]", style=wx.ALIGN_CENTER)
        self.label_14_copy_5 = wx.StaticText(self.panel_1, wx.ID_ANY, "[mm^-1]", style=wx.ALIGN_CENTER)
        self.label_14_copy_4 = wx.StaticText(self.panel_1, wx.ID_ANY, "[K]", style=wx.ALIGN_CENTER)
        self.label_14_copy_6 = wx.StaticText(self.panel_1, wx.ID_ANY, "[Frames]")
        self.label_14_copy_3_copy = wx.StaticText(self.panel_1, wx.ID_ANY, "[MGy]", style=wx.ALIGN_CENTER)
        self.label_14_copy_3_copy_copy = wx.StaticText(self.panel_1, wx.ID_ANY, "", style=wx.ALIGN_CENTER)
        self.button_7 = wx.Button(self.panel_1, wx.ID_ANY, "Estimate Final")
        self.notebook_1_pane_3 = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.label_22 = wx.StaticText(self.notebook_1_pane_3, wx.ID_ANY, "Wavelength")
        self.wavelengthBox = wx.TextCtrl(self.notebook_1_pane_3, wx.ID_ANY, "1.0000")
        self.label_22_copy = wx.StaticText(self.notebook_1_pane_3, wx.ID_ANY, "[A]")
        self.buttonGetWL = wx.Button(self.notebook_1_pane_3, wx.ID_ANY, "[Get Current Wavelength]")
        self.label_1 = wx.StaticText(self.notebook_1_pane_3, wx.ID_ANY, "")
        self.label_16 = wx.StaticText(self.notebook_1_pane_3, wx.ID_ANY, "[Important note]\nTuning BSS is enough in range 1.45A - 0.82A.\nPlease contact beamline staff if you think the beam position is not so good.")
        self.label_16_copy = wx.StaticText(self.notebook_1_pane_3, wx.ID_ANY, "A. Open DSS and check Ring current.\nB. KUMA system will sleep during tuning. Please take a rest for 5 mins.\nC. Check a log box after awake of KUMA\n   -> A string \"Failed\" or \"Exception\" appears when the tune fails.")
        self.button_7_copy = wx.Button(self.notebook_1_pane_3, wx.ID_ANY, "Do tune")
        self.tuneLogTextBox = wx.TextCtrl(self.notebook_1_pane_3, wx.ID_ANY, "", style=wx.TE_CHARWRAP | wx.TE_MULTILINE | wx.TE_READONLY)
        self.notebook_1_pane_4 = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.label_1_copy_1 = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "Data directory", style=wx.ALIGN_CENTER)
        home_dir=os.environ['HOME']
        self.direBox = wx.TextCtrl(self.notebook_1_pane_4, wx.ID_ANY, "%s"%home_dir)
        self.button_9 = wx.Button(self.notebook_1_pane_4, wx.ID_ANY, "ChooseDire")
        self.label_1_copy_copy = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "File prefix", style=wx.ALIGN_CENTER)
        self.prefixBox = wx.TextCtrl(self.notebook_1_pane_4, wx.ID_ANY, "prefix")
        self.label_2_copy = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "Serial offset", style=wx.ALIGN_CENTER)
        self.serialBox = wx.TextCtrl(self.notebook_1_pane_4, wx.ID_ANY, "0")
        self.label_1_copy_copy_copy = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "Beam size", style=wx.ALIGN_CENTER)
        config_dir="/isilon/blconfig/bl32xu/"
        bsconf=BeamsizeConfig.BeamsizeConfig(config_dir)
        blist=bsconf.getBeamsizeListForKUMA()
        self.beamsizePullDown = wx.Choice(self.notebook_1_pane_4, -1, choices=blist)
        self.static_line_2 = wx.StaticLine(self.notebook_1_pane_4, wx.ID_ANY)
        self.label_3_copy = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "Oscillation from ")
        self.oscStartBox = wx.TextCtrl(self.notebook_1_pane_4, wx.ID_ANY, "0.0", style=wx.TE_CENTRE)
        self.label_4_copy_copy = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "to")
        self.oscEndBox = wx.TextCtrl(self.notebook_1_pane_4, wx.ID_ANY, "180.0", style=wx.TE_CENTRE)
        self.label_4_copy_copy_copy = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "by")
        self.oscStepBox = wx.TextCtrl(self.notebook_1_pane_4, wx.ID_ANY, "1.0", style=wx.TE_CENTRE)
        self.label_4_copy_copy_copy_copy = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "[deg]")
        self.setCurrentPhiButton = wx.Button(self.notebook_1_pane_4, wx.ID_ANY, "Set Curr Phi")
        self.label_3_copy_copy = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "Exposure time", style=wx.ALIGN_CENTER)
        self.exptimeBox = wx.TextCtrl(self.notebook_1_pane_4, wx.ID_ANY, "1.0", style=wx.TE_CENTRE)
        self.label_4_copy_copy_1 = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "[sec]")
        self.wlBox_copy = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "Wavelength")
        self.wavelenBox = wx.TextCtrl(self.notebook_1_pane_4, wx.ID_ANY, "1.0000", style=wx.TE_CENTRE)
        self.label_4_copy_copy_1_copy = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "[A]")
        self.expBox = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "Camera length")
        self.camelenBox = wx.TextCtrl(self.notebook_1_pane_4, wx.ID_ANY, "250.0", style=wx.TE_CENTRE)
        self.label_4_copy_copy_1_copy_copy = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "[mm]")
        self.label_3_copy_copy_copy = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "Attenuator")
        att_factor=AttFactor()
        alist=att_factor.getAttList()
        self.attPullDown = wx.ComboBox(self.notebook_1_pane_4, -1, choices=alist, style=wx.CB_DROPDOWN)
        self.label_4_copy_1 = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "[um]")
        self.checkbox_3 = wx.CheckBox(self.notebook_1_pane_4, wx.ID_ANY, "Low Noise Mode")
        self.static_line_1 = wx.StaticLine(self.notebook_1_pane_4, wx.ID_ANY, style=wx.LI_VERTICAL)
        self.label_9_copy_1 = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "Simulation")
        self.label_10_copy_1 = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "Edge resol", style=wx.ALIGN_CENTER)
        self.edgeResolSimuBox = wx.TextCtrl(self.notebook_1_pane_4, wx.ID_ANY, "", style=wx.TE_CENTRE | wx.TE_READONLY)
        self.label_11 = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "[A]")
        self.label_10_copy_copy = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "Att. Factor", style=wx.ALIGN_CENTER)
        self.attSimuBox = wx.TextCtrl(self.notebook_1_pane_4, wx.ID_ANY, "", style=wx.TE_CENTRE | wx.TE_READONLY)
        self.label_11_copy_copy = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "[%]")
        self.label_10_copy_copy_copy_copy_1 = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "Adv. length", style=wx.ALIGN_CENTER)
        self.advancedLength = wx.TextCtrl(self.notebook_1_pane_4, wx.ID_ANY, "", style=wx.TE_CENTRE | wx.TE_READONLY)
        self.label_11_copy_copy_2 = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "[um]")
        self.label_10_copy_copy_copy_copy_3_copy = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "Full flux", style=wx.ALIGN_CENTER)
        self.FluxBox = wx.TextCtrl(self.notebook_1_pane_4, wx.ID_ANY, "", style=wx.TE_CENTRE | wx.TE_READONLY)
        self.label_11_copy_copy_4_copy = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "[phs/s.]")
        self.label_10_copy_copy_copy_copy_3_copy_copy_copy_copy_copy = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "# of frames", style=wx.ALIGN_CENTER)
        self.numFrameBox = wx.TextCtrl(self.notebook_1_pane_4, wx.ID_ANY, "", style=wx.TE_CENTRE | wx.TE_READONLY)
        self.label_11_copy_copy_4_copy_copy_copy_copy_copy = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "[frames]")
        self.label_10_copy_copy_copy_copy_3_copy_copy = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "Photons/frame", style=wx.ALIGN_CENTER)
        self.photonsPerFrameBox = wx.TextCtrl(self.notebook_1_pane_4, wx.ID_ANY, "", style=wx.TE_CENTRE | wx.TE_READONLY)
        self.label_11_copy_copy_4_copy_copy = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "[phs]")
        self.label_9_copy_1_copy = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "Parameters")
        self.label_10_copy_copy_copy_copy_3_copy_copy_copy_copy = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "Total exposure", style=wx.ALIGN_CENTER)
        self.totalExpBox = wx.TextCtrl(self.notebook_1_pane_4, wx.ID_ANY, "", style=wx.TE_CENTRE | wx.TE_READONLY)
        self.label_11_copy_copy_4_copy_copy_copy_copy = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "[s.]")
        self.label_10_copy_copy_copy_copy_3_copy_copy_copy_copy_copy_1 = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "photons/deg.=", style=wx.ALIGN_CENTER)
        self.phsPerRotBox = wx.TextCtrl(self.notebook_1_pane_4, wx.ID_ANY, "", style=wx.TE_CENTRE | wx.TE_READONLY)
        self.label_11_copy_copy_4_copy_copy_copy_copy_copy_1 = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "")
        self.label_10_copy_copy_copy_copy_1_copy = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "Trans. Speed.", style=wx.ALIGN_CENTER)
        self.transSpeedBox = wx.TextCtrl(self.notebook_1_pane_4, wx.ID_ANY, "", style=wx.TE_CENTRE | wx.TE_READONLY)
        self.label_11_copy_copy_2_copy = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "[um/s.]")
        self.label_10_copy_copy_copy_copy_3_copy_copy_copy = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "Rot.Speed.", style=wx.ALIGN_CENTER)
        self.rotSpeedBox = wx.TextCtrl(self.notebook_1_pane_4, wx.ID_ANY, "", style=wx.TE_CENTRE | wx.TE_READONLY)
        self.label_11_copy_copy_4_copy_copy_copy = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "[deg/s.]")
        self.label_10_copy_copy_copy_copy_1_copy_copy = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "Ave. CountRate", style=wx.ALIGN_CENTER)
        self.countRateBox = wx.TextCtrl(self.notebook_1_pane_4, wx.ID_ANY, "", style=wx.TE_CENTRE | wx.TE_READONLY)
        self.label_11_copy_copy_2_copy_copy = wx.StaticText(self.notebook_1_pane_4, wx.ID_ANY, "[phs/mm^2/s.]")
        self.notebook_1_copy = wx.Notebook(self.notebook_1_pane_4, wx.ID_ANY)
        self.notebook_1_pane_1_copy = wx.Panel(self.notebook_1_copy, wx.ID_ANY)
        self.checkbox_1 = wx.CheckBox(self.notebook_1_pane_1_copy, wx.ID_ANY, "Advanced ON")
        self.label_15 = wx.StaticText(self.notebook_1_pane_1_copy, wx.ID_ANY, "X")
        self.label_15_copy = wx.StaticText(self.notebook_1_pane_1_copy, wx.ID_ANY, "Y")
        self.label_15_copy_1 = wx.StaticText(self.notebook_1_pane_1_copy, wx.ID_ANY, "Z")
        self.label_4_copy_1_copy_copy_1_copy_2_copy_copy = wx.StaticText(self.notebook_1_pane_1_copy, wx.ID_ANY, "Suggested attenuation factor/thickness")
        self.vec1Box = wx.StaticText(self.notebook_1_pane_1_copy, wx.ID_ANY, "Vector1")
        self.vec1XBox = wx.TextCtrl(self.notebook_1_pane_1_copy, wx.ID_ANY, "0.0", style=wx.TE_CENTRE)
        self.vec1YBox = wx.TextCtrl(self.notebook_1_pane_1_copy, wx.ID_ANY, "1.0", style=wx.TE_CENTRE)
        self.vec1ZBox = wx.TextCtrl(self.notebook_1_pane_1_copy, wx.ID_ANY, "1.2", style=wx.TE_CENTRE)
        self.setVec1Button = wx.Button(self.notebook_1_pane_1_copy, wx.ID_ANY, "set")
        self.label_9 = wx.StaticText(self.notebook_1_pane_1_copy, wx.ID_ANY, "Att.Fac.")
        self.dispARDbox = wx.TextCtrl(self.notebook_1_pane_1_copy, wx.ID_ANY, "", style=wx.TE_CENTRE | wx.TE_READONLY)
        self.label_4_copy_1_copy_copy_1_copy_2_copy = wx.StaticText(self.notebook_1_pane_1_copy, wx.ID_ANY, "")
        self.checkButton = wx.Button(self.notebook_1_pane_1_copy, wx.ID_ANY, "Check")
        self.vec1Box_copy = wx.StaticText(self.notebook_1_pane_1_copy, wx.ID_ANY, "Vector2")
        self.vec2XBox = wx.TextCtrl(self.notebook_1_pane_1_copy, wx.ID_ANY, "0.0", style=wx.TE_CENTRE)
        self.vec2YBox = wx.TextCtrl(self.notebook_1_pane_1_copy, wx.ID_ANY, "1.0", style=wx.TE_CENTRE)
        self.vec2ZBox = wx.TextCtrl(self.notebook_1_pane_1_copy, wx.ID_ANY, "1.0", style=wx.TE_CENTRE)
        self.setVec2Button = wx.Button(self.notebook_1_pane_1_copy, wx.ID_ANY, "set")
        self.label_9_copy = wx.StaticText(self.notebook_1_pane_1_copy, wx.ID_ANY, "Att. Thickness")
        self.dispSuitAttBox = wx.TextCtrl(self.notebook_1_pane_1_copy, wx.ID_ANY, "", style=wx.TE_CENTRE | wx.TE_READONLY)
        self.label_4_copy_1_copy_copy_1_copy_2 = wx.StaticText(self.notebook_1_pane_1_copy, wx.ID_ANY, "[um]")
        self.makeOutput = wx.Button(self.notebook_1_pane_1_copy, wx.ID_ANY, "Output .sch")
        self.vec1Box_copy_copy = wx.StaticText(self.notebook_1_pane_1_copy, wx.ID_ANY, "Dose slicing?")
        self.checkbox_4 = wx.CheckBox(self.notebook_1_pane_1_copy, wx.ID_ANY, "YES")
        self.vec2YBox_copy_copy = wx.TextCtrl(self.notebook_1_pane_1_copy, wx.ID_ANY, "25", style=wx.TE_CENTRE)
        self.label_9_copy_copy_1_copy_copy = wx.StaticText(self.notebook_1_pane_1_copy, wx.ID_ANY, "%")
        self.vec2YBox_copy = wx.TextCtrl(self.notebook_1_pane_1_copy, wx.ID_ANY, "4", style=wx.TE_CENTRE)
        self.label_9_copy_copy_1_copy = wx.StaticText(self.notebook_1_pane_1_copy, wx.ID_ANY, "times")
        self.notebook_1_pane_2_copy = wx.Panel(self.notebook_1_copy, wx.ID_ANY)
        self.label_15_copy_3 = wx.StaticText(self.notebook_1_pane_2_copy, wx.ID_ANY, "X")
        self.label_15_copy_copy_1 = wx.StaticText(self.notebook_1_pane_2_copy, wx.ID_ANY, "Y")
        self.label_15_copy_1_copy_1 = wx.StaticText(self.notebook_1_pane_2_copy, wx.ID_ANY, "Z")
        self.vec1Box_copy_2 = wx.StaticText(self.notebook_1_pane_2_copy, wx.ID_ANY, "Origin")
        self.OrigXbox = wx.TextCtrl(self.notebook_1_pane_2_copy, wx.ID_ANY, "0.0", style=wx.TE_CENTRE)
        self.OrigYbox = wx.TextCtrl(self.notebook_1_pane_2_copy, wx.ID_ANY, "0.0", style=wx.TE_CENTRE)
        self.OrigZbox = wx.TextCtrl(self.notebook_1_pane_2_copy, wx.ID_ANY, "0.0", style=wx.TE_CENTRE)
        self.setOrigVecButton = wx.Button(self.notebook_1_pane_2_copy, wx.ID_ANY, "set")
        self.advFramePerPoint2d = wx.TextCtrl(self.notebook_1_pane_2_copy, wx.ID_ANY, "1", style=wx.TE_CENTRE)
        self.label_4_copy_1_copy_copy_1_copy_copy = wx.StaticText(self.notebook_1_pane_2_copy, wx.ID_ANY, "[frames/pts]")
        self.vec1Box_copy_copy_1 = wx.StaticText(self.notebook_1_pane_2_copy, wx.ID_ANY, "Slow")
        self.SlowXbox = wx.TextCtrl(self.notebook_1_pane_2_copy, wx.ID_ANY, "0.0", style=wx.TE_CENTRE)
        self.SlowYbox = wx.TextCtrl(self.notebook_1_pane_2_copy, wx.ID_ANY, "1.0", style=wx.TE_CENTRE)
        self.SlowZbox = wx.TextCtrl(self.notebook_1_pane_2_copy, wx.ID_ANY, "0.0", style=wx.TE_CENTRE)
        self.setSlowVecButton = wx.Button(self.notebook_1_pane_2_copy, wx.ID_ANY, "set")
        self.label_8_copy = wx.StaticText(self.notebook_1_pane_2_copy, wx.ID_ANY, "Slow")
        self.slowNpts = wx.TextCtrl(self.notebook_1_pane_2_copy, wx.ID_ANY, "10")
        self.label_4_copy_1_copy_copy_1_copy_1 = wx.StaticText(self.notebook_1_pane_2_copy, wx.ID_ANY, "[pts]")
        self.checkButton_copy_1 = wx.Button(self.notebook_1_pane_2_copy, wx.ID_ANY, "Check")
        self.vec1Box_copy_copy_1_copy = wx.StaticText(self.notebook_1_pane_2_copy, wx.ID_ANY, "Fast")
        self.FastXbox = wx.TextCtrl(self.notebook_1_pane_2_copy, wx.ID_ANY, "0.0", style=wx.TE_CENTRE)
        self.FastYbox = wx.TextCtrl(self.notebook_1_pane_2_copy, wx.ID_ANY, "0.0", style=wx.TE_CENTRE)
        self.FastZbox = wx.TextCtrl(self.notebook_1_pane_2_copy, wx.ID_ANY, "1.0", style=wx.TE_CENTRE)
        self.setFastVecButton = wx.Button(self.notebook_1_pane_2_copy, wx.ID_ANY, "set")
        self.label_8_copy_1 = wx.StaticText(self.notebook_1_pane_2_copy, wx.ID_ANY, "Fast")
        self.fastNpts = wx.TextCtrl(self.notebook_1_pane_2_copy, wx.ID_ANY, "10")
        self.label_4_copy_1_copy_copy_1_copy_1_copy = wx.StaticText(self.notebook_1_pane_2_copy, wx.ID_ANY, "[pts]")
        self.makeOutput2D = wx.Button(self.notebook_1_pane_2_copy, wx.ID_ANY, "Output .sch")
        self.notebook_1_pane_5 = wx.Panel(self.notebook_1, wx.ID_ANY)
        self.label_18 = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "Directory", style=wx.ALIGN_CENTER)
        home_dir=os.environ['HOME']
        self.multi_dire_box = wx.TextCtrl(self.notebook_1_pane_5, wx.ID_ANY, "%s"%home_dir)
        self.button_10 = wx.Button(self.notebook_1_pane_5, wx.ID_ANY, "Choose directory")
        self.label_18_copy = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "Data prefix", style=wx.ALIGN_CENTER)
        self.prefix_box_multi = wx.TextCtrl(self.notebook_1_pane_5, wx.ID_ANY, "multi")
        self.label_1_copy_copy_copy_copy = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "Beam size", style=wx.ALIGN_CENTER)
        config_dir="/isilon/blconfig/bl32xu/"
        bsconf=BeamsizeConfig.BeamsizeConfig(config_dir)
        blist=bsconf.getBeamsizeListForKUMA()
        self.beamsizePullDown2 = wx.Choice(self.notebook_1_pane_5, -1, choices=blist)
        self.button_11_copy = wx.Button(self.notebook_1_pane_5, wx.ID_ANY, "Check")
        self.button_11 = wx.Button(self.notebook_1_pane_5, wx.ID_ANY, "Generate")
        self.list_multi = wx.ListCtrl(self.notebook_1_pane_5, wx.ID_ANY, style=wx.BORDER_SUNKEN | wx.LC_REPORT)
        self.appendButton_multi = wx.Button(self.notebook_1_pane_5, wx.ID_ANY, "Copy all XYZ")
        self.deleteButton_multi = wx.Button(self.notebook_1_pane_5, wx.ID_ANY, "Delete")
        self.clearAllButton_multi = wx.Button(self.notebook_1_pane_5, wx.ID_ANY, "Clear All")
        self.label_8 = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "Middle phi")
        self.midphi_multi = wx.TextCtrl(self.notebook_1_pane_5, wx.ID_ANY, "0.0", style=wx.TE_CENTRE)
        self.label_19 = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "[deg.]")
        self.label_8_copy_2 = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "Distance")
        self.cl_multi = wx.TextCtrl(self.notebook_1_pane_5, wx.ID_ANY, "250", style=wx.TE_CENTRE)
        self.label_19_copy = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "[mm]")
        self.label_8_copy_4 = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "Osc width")
        self.osc_wid_multi = wx.TextCtrl(self.notebook_1_pane_5, wx.ID_ANY, "1.0", style=wx.TE_CENTRE)
        self.label_19_copy_1 = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "[deg.]")
        self.label_8_copy_5 = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "Osc range")
        self.total_osc_multi = wx.TextCtrl(self.notebook_1_pane_5, wx.ID_ANY, "10.0", style=wx.TE_CENTRE)
        self.label_19_copy_2 = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "[deg.]")
        self.label_8_copy_5_copy_copy_1 = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "Exp.Time.")
        self.exptime_for_each = wx.TextCtrl(self.notebook_1_pane_5, wx.ID_ANY, "1.0", style=wx.TE_CENTRE)
        self.label_19_copy_3_copy_1 = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "[sec.]")
        self.label_8_copy_5_copy_copy_1_copy = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "Dose for data collect[MGy]\nNative: 8-10 MGy\nPhasing: 5-8 MGy", style=wx.ALIGN_CENTER)
        self.dose_box = wx.TextCtrl(self.notebook_1_pane_5, wx.ID_ANY, "10.0", style=wx.TE_CENTRE)
        self.label_19_copy_3_copy_1_copy_copy = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "[MGy]")
        self.label_20 = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "Wavelenth")
        self.wl_box_multi = wx.TextCtrl(self.notebook_1_pane_5, wx.ID_ANY, "1.0000", style=wx.TE_CENTRE | wx.TE_READONLY)
        self.label_21 = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "[A]")
        self.label_20_copy = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "# of Cry")
        self.ncry_box_multi = wx.TextCtrl(self.notebook_1_pane_5, wx.ID_ANY, "10", style=wx.TE_CENTRE | wx.TE_READONLY)
        self.label_21_copy = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "[crystals]")
        self.label_20_copy_1 = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "Edge resol.")
        self.edge_res_multi = wx.TextCtrl(self.notebook_1_pane_5, wx.ID_ANY, "2.5", style=wx.TE_CENTRE | wx.TE_READONLY)
        self.label_21_copy_1 = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "[A]")
        self.label_20_copy_3 = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "Osc range")
        self.startphi_multi = wx.TextCtrl(self.notebook_1_pane_5, wx.ID_ANY, "-5.0", style=wx.TE_CENTRE | wx.TE_READONLY)
        self.label_20_copy_3_copy = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "To", style=wx.ALIGN_CENTER)
        self.end_phi_multi = wx.TextCtrl(self.notebook_1_pane_5, wx.ID_ANY, "5.0", style=wx.TE_CENTRE | wx.TE_READONLY)
        self.label_21_copy_3_copy = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "[deg.]")
        self.label_20_copy_1_copy = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "Total Exp.")
        self.totalExpMultiBox = wx.TextCtrl(self.notebook_1_pane_5, wx.ID_ANY, "0.35", style=wx.TE_CENTRE | wx.TE_READONLY)
        self.label_21_copy_1_copy = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "[sec]")
        self.label_20_copy_1_copy_copy_1 = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "Limit exp.")
        self.totalExpMultiBox_copy = wx.TextCtrl(self.notebook_1_pane_5, wx.ID_ANY, "0.35", style=wx.TE_CENTRE | wx.TE_READONLY)
        self.label_21_copy_1_copy_copy_1 = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "[sec]")
        self.label_20_copy_2 = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "Att thick")
        self.att_thick_multi = wx.TextCtrl(self.notebook_1_pane_5, wx.ID_ANY, "600", style=wx.TE_CENTRE | wx.TE_READONLY)
        self.label_21_copy_2 = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "[um]")
        self.label_20_copy_1_copy_copy = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "Flux/rot")
        self.phsPerDegBoxMulti = wx.TextCtrl(self.notebook_1_pane_5, wx.ID_ANY, "1.0", style=wx.TE_CENTRE | wx.TE_READONLY)
        self.label_21_copy_1_copy_copy = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "[phs./deg.]")
        self.label_20_copy_1_copy_copy_copy = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "FF exp.")
        self.FFexptimeBox = wx.TextCtrl(self.notebook_1_pane_5, wx.ID_ANY, "1.0", style=wx.TE_CENTRE | wx.TE_READONLY)
        self.label_21_copy_1_copy_copy_copy = wx.StaticText(self.notebook_1_pane_5, wx.ID_ANY, "[sec]")
        self.appendButton = wx.Button(self, wx.ID_ANY, "Append")
        self.deleteButton = wx.Button(self, wx.ID_ANY, "Delete")
        self.clearAllButton = wx.Button(self, wx.ID_ANY, "Clear All")
        self.button_6_copy = wx.Button(self, wx.ID_ANY, "Save the list to file")
        self.label_1_copy = wx.StaticText(self, wx.ID_ANY, "Explanation of the point")
        self.inputComment = wx.TextCtrl(self, wx.ID_ANY, "")
        self.list_ctrl_1 = wx.ListCtrl(self, wx.ID_ANY, style=wx.BORDER_SUNKEN | wx.LC_REPORT)
        self.button_6 = wx.Button(self, wx.ID_ANY, "Move to the selected")
        self.label_13 = wx.StaticText(self, wx.ID_ANY, "Move")
        self.withPHIcheck = wx.CheckBox(self, wx.ID_ANY, "with PHI[deg]")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.upButton, self.button_1_copy)
        self.Bind(wx.EVT_BUTTON, self.leftButton, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.rightButton, self.button_1_copy_2)
        self.Bind(wx.EVT_BUTTON, self.downButton, self.button_1_copy_1)
        self.Bind(wx.EVT_BUTTON, self.pintPlus, self.button_2)
        self.Bind(wx.EVT_BUTTON, self.pintMinus, self.button_2_copy)
        self.Bind(wx.EVT_BUTTON, self.reversePhiPlus, self.button_3)
        self.Bind(wx.EVT_BUTTON, self.phiP90, self.button_3_copy_copy)
        self.Bind(wx.EVT_BUTTON, self.phiPlus, self.button_3_copy)
        self.Bind(wx.EVT_BUTTON, self.phiMinus, self.button_3_copy_1)
        self.Bind(wx.EVT_BUTTON, self.phiM90, self.button_3_copy_copy_1)
        self.Bind(wx.EVT_BUTTON, self.reversePhiMinus, self.button_3_copy_2)
        self.Bind(wx.EVT_BUTTON, self.updateGonio, self.button_5)
        self.Bind(wx.EVT_BUTTON, self.prepCentering, self.button_4)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.pushLightDown, self.button_8)
        self.Bind(wx.EVT_CHECKBOX, self.pushWithCryoZ, self.checkbox_2)
        self.Bind(wx.EVT_CHECKBOX, self.pushWithLight, self.checkbox_2_copy)
        self.Bind(wx.EVT_BUTTON, self.tenoseDo, self.evacManual)
        self.Bind(wx.EVT_BUTTON, self.pushResetConditions, self.dResetConditionButton)
        self.Bind(wx.EVT_BUTTON, self.pushEstimateDose, self.dDoseEstimationButton)
        self.Bind(wx.EVT_BUTTON, self.pushEstimateFinal, self.button_7)
        self.Bind(wx.EVT_BUTTON, self.pushGetWL, self.buttonGetWL)
        self.Bind(wx.EVT_BUTTON, self.pushTuneButton, self.button_7_copy)
        self.Bind(wx.EVT_BUTTON, self.pushChooseDirectoryButton, self.button_9)
        self.Bind(wx.EVT_BUTTON, self.pushSetPhi, self.setCurrentPhiButton)
        self.Bind(wx.EVT_COMBOBOX, self.selectAttList, self.attPullDown)
        self.Bind(wx.EVT_CHECKBOX, self.setLowNoiseTrue, self.checkbox_3)
        self.Bind(wx.EVT_CHECKBOX, self.setAdvTrue, self.checkbox_1)
        self.Bind(wx.EVT_BUTTON, self.pushSetVec1, self.setVec1Button)
        self.Bind(wx.EVT_BUTTON, self.pushCheck, self.checkButton)
        self.Bind(wx.EVT_BUTTON, self.pushSetVec2, self.setVec2Button)
        self.Bind(wx.EVT_BUTTON, self.pushOutput, self.makeOutput)
        self.Bind(wx.EVT_BUTTON, self.pushOrigVec, self.setOrigVecButton)
        self.Bind(wx.EVT_BUTTON, self.pushSlowVec, self.setSlowVecButton)
        self.Bind(wx.EVT_BUTTON, self.pushCheck2D, self.checkButton_copy_1)
        self.Bind(wx.EVT_BUTTON, self.pushFastVec, self.setFastVecButton)
        self.Bind(wx.EVT_BUTTON, self.pushOutput2D, self.makeOutput2D)
        self.Bind(wx.EVT_BUTTON, self.pushChoDire, self.button_10)
        self.Bind(wx.EVT_BUTTON, self.chkMulti, self.button_11_copy)
        self.Bind(wx.EVT_BUTTON, self.genMulti, self.button_11)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnListSelectedMulti, self.list_multi)
        self.Bind(wx.EVT_BUTTON, self.OnAppendMulti, self.appendButton_multi)
        self.Bind(wx.EVT_BUTTON, self.OndeleteMulti, self.deleteButton_multi)
        self.Bind(wx.EVT_BUTTON, self.OnClearAllMulti, self.clearAllButton_multi)
        self.Bind(wx.EVT_BUTTON, self.OnAppend, self.appendButton)
        self.Bind(wx.EVT_BUTTON, self.Ondelete, self.deleteButton)
        self.Bind(wx.EVT_BUTTON, self.OnClearAll, self.clearAllButton)
        self.Bind(wx.EVT_BUTTON, self.saveGlistToFile, self.button_6_copy)
        self.Bind(wx.EVT_LIST_INSERT_ITEM, self.OnListInsertItem, self.list_ctrl_1)
        self.Bind(wx.EVT_LIST_COL_CLICK, self.OnListColClick, self.list_ctrl_1)
        self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnDobleClick, self.list_ctrl_1)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnListSelected, self.list_ctrl_1)
        self.Bind(wx.EVT_BUTTON, self.moveToSelected, self.button_6)
        # end wxGlade

        # Kuntaro definition
        self.list_ctrl_1.InsertColumn(0,"Comment",width=200)
        self.list_ctrl_1.InsertColumn(1,"GonioX",width=100)
        self.list_ctrl_1.InsertColumn(2,"GonioY",width=100)
        self.list_ctrl_1.InsertColumn(3,"GonioZ",width=100)
        self.list_ctrl_1.InsertColumn(4,"GonioPHI",width=100)
        self.gonio_list=[]
        self.selected=-1
	self.att_index=0
	self.att_thickness=0.0

	# Parameters
        self.confdir="/isilon/blconfig/bl32xu/"
	self.bsconf=BeamsizeConfig.BeamsizeConfig(self.confdir)
	self.flux_list=self.bsconf.getFluxListForKUMA()

	# For multi-crystal data collection
        self.list_multi.InsertColumn(0,"COMM",width=80)
        self.list_multi.InsertColumn(1,"X",width=70)
        self.list_multi.InsertColumn(2,"Y",width=70)
        self.list_multi.InsertColumn(3,"Z",width=70)
        self.list_multi.InsertColumn(4,"PHI",width=70)

        #grid_sizer_1.Add(self.list_multi, 0, wx.EXPAND, 0)

	# Advanced off at start
	self.vec1XBox.Enable(False)
	self.vec1YBox.Enable(False)
	self.vec1ZBox.Enable(False)
	self.vec2XBox.Enable(False)
	self.vec2YBox.Enable(False)
	self.vec2ZBox.Enable(False)

        # kuntaro classes
        ##host = '192.168.163.1'
        host = '172.24.242.41'
        port = 10101
        self.s = s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((host,port))

        self.gonio=Gonio(s)
        self.gv=GonioVec()
        self.colli=Colli(s)
        self.light=Light(s)
        self.bs=BS(s)
        self.cryo=Cryo(s)
	self.scheFile=ScheduleBSS_HS()
	self.att=Att(s)
	self.mono=Mono(s)
	self.attfac=AttFactor()

	# LOG FILE
	logname="/isilon/BL32XU/BLsoft/PPPP/03.GUI/98.Factory/Honki/Log/kuma_%s.log"% \
		(datetime.datetime.now().strftime('%Y%m%d%H%M'))
	self.logfile=open(logname,"w")

        # SHIKA
        self.shika_intr = kuma_shika_commu.kuma_shika_interface(self)
        self.Bind(kuma_shika_commu.EVT_APPEND_SHIKA, self.OnAppendShika)
        self.Bind(wx.EVT_CLOSE, self.onClose)

    def __set_properties(self):
        # begin wxGlade: MyFrame2.__set_properties
        self.SetTitle("KUMA system")
        self.button_1_copy.SetMinSize((50, 50))
        self.button_1.SetMinSize((50, 50))
        self.distBox.SetMinSize((100, 50))
        self.distBox.SetSelection(0)
        self.button_1_copy_2.SetMinSize((50, 50))
        self.button_1_copy_1.SetMinSize((50, 50))
        self.button_3.SetMinSize((117, 32))
        self.button_3_copy_copy.SetMinSize((117, 32))
        self.button_3_copy.SetMinSize((117, 32))
        self.phiBox.SetMinSize((100, 32))
        self.phiBox.SetSelection(1)
        self.button_3_copy_1.SetMinSize((117, 32))
        self.button_3_copy_copy_1.SetMinSize((117, 32))
        self.button_3_copy_2.SetMinSize((117, 32))
        self.label_6.SetMinSize((50, 14))
        self.label_6_copy.SetMinSize((50, 14))
        self.label_6_copy_1.SetMinSize((50, 14))
        self.label_6_copy_2.SetMinSize((50, 14))
        self.label_6_copy_3.SetMinSize((50, 14))
        self.button_4.SetMinSize((200, 32))
        self.button_8.SetMinSize((200, 32))
        self.checkbox_2.SetMinSize((135, 21))
        self.checkbox_2_copy.SetMinSize((155, 21))
        self.checkbox_2_copy.SetValue(1)
        self.evacManual.SetMinSize((200, 32))
        self.label_17.SetFont(wx.Font(15, wx.DEFAULT, wx.ITALIC, wx.BOLD, 0, ""))
        self.label_12_copy.SetMinSize((200, 17))
        self.dCellBox.SetMinSize((200, 27))
        self.label_12_copy_1.SetMinSize((200, 17))
        self.dNresBox.SetMinSize((200, 27))
        self.label_12_copy_2.SetMinSize((200, 17))
        self.dNchainsBox.SetMinSize((200, 27))
        self.label_12_copy_2_copy_copy_copy_copy_1.SetMinSize((200, 17))
        self.dSolventFractionBox.SetMinSize((200, 27))
        self.label_12_copy_2_copy.SetMinSize((200, 17))
        self.dHABox.SetMinSize((200, 27))
        self.label_12_copy_2_copy_copy.SetMinSize((200, 17))
        self.dIonBox.SetMinSize((200, 27))
        self.label_12_copy_2_copy_copy_copy.SetMinSize((200, 17))
        self.dCrySizeBox.SetMinSize((200, 27))
        self.label_12_copy_2_copy_copy_copy_copy.SetMinSize((200, 17))
        self.dBeamSizeBox.SetMinSize((200, 27))
        self.label_12_copy_2_copy_copy_copy_copy_copy.SetMinSize((200, 17))
        self.dFluxBox.SetMinSize((200, 27))
        self.label_10.SetMinSize((200, 17))
        self.dWLBox.SetMinSize((200, 27))
        self.label_12.SetMinSize((150, 17))
        self.dResetConditionButton.SetMinSize((119, 45))
        self.dResetConditionButton.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.dResetConditionButton.SetForegroundColour(wx.Colour(255, 0, 0))
        self.dDoseEstimationButton.SetMinSize((200, 45))
        self.dDoseEstimationButton.SetBackgroundColour(wx.Colour(74, 211, 255))
        self.dDoseEstimationButton.SetForegroundColour(wx.Colour(60, 59, 55))
        self.dDoseEstimationButton.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.label_14.SetMinSize((120, 40))
        self.label_14.SetFont(wx.Font(15, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.label_14_copy.SetMinSize((120, 40))
        self.label_14_copy.SetFont(wx.Font(15, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.label_14_copy_1.SetMinSize((120, 40))
        self.label_14_copy_1.SetFont(wx.Font(15, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.label_14_copy_2.SetMinSize((120, 40))
        self.label_14_copy_2.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.label_14_copy_7.SetMinSize((120, 40))
        self.label_14_copy_7.SetBackgroundColour(wx.Colour(216, 191, 216))
        self.label_14_copy_7.SetFont(wx.Font(15, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.label_14_copy_7_copy.SetMinSize((120, 40))
        self.label_14_copy_7_copy.SetBackgroundColour(wx.Colour(216, 191, 216))
        self.label_14_copy_7_copy.SetFont(wx.Font(15, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.label_14_copy_7_copy_copy.SetMinSize((120, 40))
        self.label_14_copy_7_copy_copy.SetBackgroundColour(wx.Colour(216, 191, 216))
        self.label_14_copy_7_copy_copy.SetFont(wx.Font(15, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.dDoseDisp.SetMinSize((120, 40))
        self.dDoseDisp.SetBackgroundColour(wx.Colour(192, 192, 192))
        self.dDoseDisp.SetForegroundColour(wx.Colour(0, 0, 0))
        self.dDoseDisp.SetFont(wx.Font(15, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.dAbsDisp.SetMinSize((120, 40))
        self.dAbsDisp.SetBackgroundColour(wx.Colour(192, 192, 192))
        self.dAbsDisp.SetForegroundColour(wx.Colour(0, 0, 0))
        self.dAbsDisp.SetFont(wx.Font(15, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.dTempRiseDisp.SetMinSize((120, 40))
        self.dTempRiseDisp.SetBackgroundColour(wx.Colour(192, 192, 192))
        self.dTempRiseDisp.SetForegroundColour(wx.Colour(0, 0, 0))
        self.dTempRiseDisp.SetFont(wx.Font(15, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.toHendersonLimitBox.SetMinSize((120, 40))
        self.toHendersonLimitBox.SetBackgroundColour(wx.Colour(192, 192, 192))
        self.toHendersonLimitBox.SetFont(wx.Font(15, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.dDesiredDoseBox.SetMinSize((120, 40))
        self.dMaxRDBox.SetMinSize((120, 40))
        self.dAttFactorBox.SetMinSize((120, 40))
        self.label_14_copy_3.SetMinSize((80, 40))
        self.label_14_copy_3.SetFont(wx.Font(15, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.label_14_copy_5.SetMinSize((80, 40))
        self.label_14_copy_5.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.label_14_copy_4.SetMinSize((80, 40))
        self.label_14_copy_4.SetFont(wx.Font(15, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.label_14_copy_6.SetMinSize((80, 40))
        self.label_14_copy_6.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.label_14_copy_3_copy.SetMinSize((80, 40))
        self.label_14_copy_3_copy.SetFont(wx.Font(15, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.label_14_copy_3_copy_copy.SetMinSize((80, 40))
        self.label_14_copy_3_copy_copy.SetFont(wx.Font(15, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.button_7.SetMinSize((105, 40))
        self.button_7.SetBackgroundColour(wx.Colour(255, 49, 21))
        self.button_7.SetForegroundColour(wx.Colour(60, 59, 55))
        self.label_22.SetMinSize((200, 30))
        self.label_22.SetFont(wx.Font(20, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.wavelengthBox.SetMinSize((200, 35))
        self.wavelengthBox.SetFont(wx.Font(20, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.label_22_copy.SetMinSize((53, 30))
        self.label_22_copy.SetFont(wx.Font(20, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.buttonGetWL.SetMinSize((300, 50))
        self.buttonGetWL.SetBackgroundColour(wx.Colour(112, 219, 147))
        self.buttonGetWL.SetFont(wx.Font(16, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.label_16.SetMinSize((700, 80))
        self.label_16.SetForegroundColour(wx.Colour(255, 0, 0))
        self.label_16.SetFont(wx.Font(15, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.label_16.SetToolTipString("TestTest")
        self.label_16_copy.SetMinSize((556, 70))
        self.label_16_copy.SetForegroundColour(wx.Colour(192, 192, 192))
        self.label_16_copy.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.label_16_copy.SetToolTipString("TESTTEST")
        self.button_7_copy.SetMinSize((136, 53))
        self.button_7_copy.SetBackgroundColour(wx.Colour(128, 128, 128))
        self.button_7_copy.SetForegroundColour(wx.Colour(192, 192, 192))
        self.button_7_copy.SetFont(wx.Font(25, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.button_7_copy.Enable(False)
        self.tuneLogTextBox.SetMinSize((700, 150))
        self.notebook_1_pane_3.SetMinSize((1392, 526))
        self.label_1_copy_1.SetMinSize((120, 18))
        self.direBox.SetMinSize((450, 30))
        self.direBox.SetBackgroundColour(wx.Colour(217, 252, 255))
        self.button_9.SetBackgroundColour(wx.Colour(35, 142, 35))
        self.button_9.SetForegroundColour(wx.Colour(255, 255, 255))
        self.label_1_copy_copy.SetMinSize((120, 30))
        self.prefixBox.SetMinSize((250, 30))
        self.prefixBox.SetBackgroundColour(wx.Colour(201, 248, 255))
        self.label_2_copy.SetMinSize((82, 30))
        self.serialBox.SetMinSize((100, 30))
        self.label_1_copy_copy_copy.SetMinSize((120, 30))
        self.beamsizePullDown.SetMinSize((200, 29))
        self.beamsizePullDown.SetBackgroundColour(wx.Colour(35, 142, 35))
        self.beamsizePullDown.SetForegroundColour(wx.Colour(255, 255, 255))
        self.beamsizePullDown.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.beamsizePullDown.SetToolTipString("TEST")
        self.beamsizePullDown.SetSelection(0)
        self.label_3_copy.SetMinSize((130, 18))
        self.oscStartBox.SetBackgroundColour(wx.Colour(255, 255, 0))
        self.oscEndBox.SetBackgroundColour(wx.Colour(255, 255, 0))
        self.oscStepBox.SetBackgroundColour(wx.Colour(255, 255, 0))
        self.label_3_copy_copy.SetMinSize((100, 18))
        self.wlBox_copy.SetMinSize((100, 18))
        self.expBox.SetMinSize((100, 18))
        self.label_3_copy_copy_copy.SetMinSize((130, 18))
        self.attPullDown.SetMinSize((150, 27))
        self.attPullDown.SetSelection(0)
        self.label_4_copy_1.SetMinSize((29, 18))
        self.checkbox_3.Enable(False)
        self.label_9_copy_1.SetMinSize((150, 23))
        self.label_9_copy_1.SetFont(wx.Font(13, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.label_10_copy_1.SetMinSize((120, 18))
        self.edgeResolSimuBox.SetMinSize((80, 28))
        self.edgeResolSimuBox.SetBackgroundColour(wx.Colour(192, 192, 192))
        self.label_10_copy_copy.SetMinSize((120, 18))
        self.attSimuBox.SetMinSize((80, 28))
        self.attSimuBox.SetBackgroundColour(wx.Colour(186, 186, 186))
        self.label_10_copy_copy_copy_copy_1.SetMinSize((120, 18))
        self.advancedLength.SetMinSize((80, 28))
        self.advancedLength.SetBackgroundColour(wx.Colour(186, 186, 186))
        self.label_10_copy_copy_copy_copy_3_copy.SetMinSize((120, 18))
        self.FluxBox.SetMinSize((80, 28))
        self.FluxBox.SetBackgroundColour(wx.Colour(186, 186, 186))
        self.label_11_copy_copy_4_copy.SetMinSize((59, 14))
        self.label_10_copy_copy_copy_copy_3_copy_copy_copy_copy_copy.SetMinSize((120, 18))
        self.numFrameBox.SetMinSize((80, 28))
        self.numFrameBox.SetBackgroundColour(wx.Colour(186, 186, 186))
        self.label_11_copy_copy_4_copy_copy_copy_copy_copy.SetMinSize((59, 14))
        self.label_10_copy_copy_copy_copy_3_copy_copy.SetMinSize((120, 18))
        self.photonsPerFrameBox.SetMinSize((80, 28))
        self.photonsPerFrameBox.SetBackgroundColour(wx.Colour(186, 186, 186))
        self.label_11_copy_copy_4_copy_copy.SetMinSize((59, 14))
        self.label_9_copy_1_copy.SetMinSize((150, 23))
        self.label_9_copy_1_copy.SetFont(wx.Font(13, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.label_10_copy_copy_copy_copy_3_copy_copy_copy_copy.SetMinSize((120, 18))
        self.totalExpBox.SetMinSize((80, 28))
        self.totalExpBox.SetBackgroundColour(wx.Colour(186, 186, 186))
        self.label_11_copy_copy_4_copy_copy_copy_copy.SetMinSize((59, 14))
        self.label_10_copy_copy_copy_copy_3_copy_copy_copy_copy_copy_1.SetMinSize((120, 18))
        self.phsPerRotBox.SetMinSize((80, 28))
        self.phsPerRotBox.SetBackgroundColour(wx.Colour(186, 186, 186))
        self.label_11_copy_copy_4_copy_copy_copy_copy_copy_1.SetMinSize((59, 14))
        self.label_10_copy_copy_copy_copy_1_copy.SetMinSize((120, 18))
        self.transSpeedBox.SetMinSize((80, 28))
        self.transSpeedBox.SetBackgroundColour(wx.Colour(186, 186, 186))
        self.label_10_copy_copy_copy_copy_3_copy_copy_copy.SetMinSize((120, 18))
        self.rotSpeedBox.SetMinSize((80, 28))
        self.rotSpeedBox.SetBackgroundColour(wx.Colour(186, 186, 186))
        self.label_11_copy_copy_4_copy_copy_copy.SetMinSize((59, 14))
        self.label_10_copy_copy_copy_copy_1_copy_copy.SetMinSize((120, 18))
        self.countRateBox.SetMinSize((80, 28))
        self.countRateBox.SetBackgroundColour(wx.Colour(186, 186, 186))
        self.checkbox_1.SetMinSize((120, 20))
        self.label_4_copy_1_copy_copy_1_copy_2_copy_copy.SetMinSize((500, 19))
        self.label_4_copy_1_copy_copy_1_copy_2_copy_copy.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.vec1Box.SetMinSize((130, 18))
        self.setVec1Button.SetMinSize((50, 32))
        self.label_9.SetMinSize((127, 25))
        self.dispARDbox.SetMinSize((100, 28))
        self.dispARDbox.SetBackgroundColour(wx.Colour(192, 192, 192))
        self.label_4_copy_1_copy_copy_1_copy_2_copy.SetMinSize((90, 19))
        self.label_4_copy_1_copy_copy_1_copy_2_copy.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.checkButton.SetMinSize((85, 27))
        self.vec1Box_copy.SetMinSize((130, 18))
        self.setVec2Button.SetMinSize((50, 32))
        self.label_9_copy.SetMinSize((127, 25))
        self.dispSuitAttBox.SetMinSize((100, 28))
        self.dispSuitAttBox.SetBackgroundColour(wx.Colour(192, 192, 192))
        self.label_4_copy_1_copy_copy_1_copy_2.SetMinSize((90, 25))
        self.label_4_copy_1_copy_copy_1_copy_2.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.makeOutput.SetMinSize((101, 27))
        self.makeOutput.SetBackgroundColour(wx.Colour(106, 183, 255))
        self.makeOutput.SetForegroundColour(wx.Colour(255, 255, 255))
        self.makeOutput.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.vec1Box_copy_copy.SetMinSize((130, 25))
        self.checkbox_4.SetMinSize((48, 25))
        self.checkbox_4.Enable(False)
        self.vec2YBox_copy_copy.SetMinSize((80, 25))
        self.vec2YBox_copy_copy.Enable(False)
        self.label_9_copy_copy_1_copy_copy.SetMinSize((37, 15))
        self.vec2YBox_copy.SetMinSize((80, 25))
        self.vec2YBox_copy.Enable(False)
        self.label_9_copy_copy_1_copy.SetMinSize((127, 25))
        self.notebook_1_pane_1_copy.SetMinSize((1386, 154))
        self.vec1Box_copy_2.SetMinSize((40, 18))
        self.setOrigVecButton.SetMinSize((50, 32))
        self.advFramePerPoint2d.SetMinSize((80, 20))
        self.label_4_copy_1_copy_copy_1_copy_copy.SetMinSize((85, 18))
        self.vec1Box_copy_copy_1.SetMinSize((40, 18))
        self.setSlowVecButton.SetMinSize((50, 32))
        self.label_8_copy.SetMinSize((28, 18))
        self.label_4_copy_1_copy_copy_1_copy_1.SetMinSize((34, 18))
        self.checkButton_copy_1.Enable(False)
        self.vec1Box_copy_copy_1_copy.SetMinSize((40, 18))
        self.setFastVecButton.SetMinSize((50, 32))
        self.label_8_copy_1.SetMinSize((28, 18))
        self.label_4_copy_1_copy_copy_1_copy_1_copy.SetMinSize((34, 18))
        self.makeOutput2D.SetBackgroundColour(wx.Colour(55, 5, 255))
        self.makeOutput2D.SetForegroundColour(wx.Colour(255, 255, 255))
        self.makeOutput2D.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.makeOutput2D.Enable(False)
        self.label_18.SetMinSize((100, 30))
        self.multi_dire_box.SetMinSize((600, 30))
        self.button_10.SetMinSize((99, 30))
        self.button_10.SetBackgroundColour(wx.Colour(255, 127, 0))
        self.label_18_copy.SetMinSize((100, 30))
        self.prefix_box_multi.SetMinSize((80, 30))
        self.label_1_copy_copy_copy_copy.SetMinSize((120, 30))
        self.beamsizePullDown2.SetMinSize((200, 29))
        self.beamsizePullDown2.SetBackgroundColour(wx.Colour(35, 142, 35))
        self.beamsizePullDown2.SetForegroundColour(wx.Colour(255, 255, 255))
        self.beamsizePullDown2.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.beamsizePullDown2.SetToolTipString("TEST")
        self.beamsizePullDown2.SetSelection(0)
        self.button_11_copy.SetMinSize((100, 40))
        self.button_11_copy.SetBackgroundColour(wx.Colour(58, 219, 255))
        self.button_11_copy.SetFont(wx.Font(14, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.button_11.SetMinSize((100, 40))
        self.button_11.SetBackgroundColour(wx.Colour(219, 112, 147))
        self.button_11.SetFont(wx.Font(14, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.list_multi.SetMinSize((400, 300))
        self.list_multi.SetFont(wx.Font(9, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.appendButton_multi.SetMinSize((117, 32))
        self.deleteButton_multi.SetMinSize((117, 32))
        self.clearAllButton_multi.SetMinSize((117, 32))
        self.label_8.SetMinSize((80, 30))
        self.midphi_multi.SetMinSize((80, 30))
        self.label_19.SetMinSize((50, 30))
        self.label_8_copy_2.SetMinSize((80, 30))
        self.cl_multi.SetMinSize((80, 30))
        self.label_19_copy.SetMinSize((50, 30))
        self.label_8_copy_4.SetMinSize((80, 30))
        self.osc_wid_multi.SetMinSize((80, 30))
        self.label_19_copy_1.SetMinSize((50, 30))
        self.label_8_copy_5.SetMinSize((80, 30))
        self.total_osc_multi.SetMinSize((80, 30))
        self.label_19_copy_2.SetMinSize((50, 30))
        self.label_8_copy_5_copy_copy_1.SetMinSize((80, 30))
        self.exptime_for_each.SetMinSize((80, 30))
        self.label_19_copy_3_copy_1.SetMinSize((50, 30))
        self.label_8_copy_5_copy_copy_1_copy.SetMinSize((271, 80))
        self.label_8_copy_5_copy_copy_1_copy.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.label_8_copy_5_copy_copy_1_copy.SetToolTipString("Exposure time which defines 'crystal life time' by exposure time with non-attenuated beam with your selected beam size. The value here is recommended limit from theoretical calculation of absorbed dose.")
        self.dose_box.SetMinSize((80, 35))
        self.dose_box.SetBackgroundColour(wx.Colour(238, 255, 47))
        self.dose_box.SetFont(wx.Font(15, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.dose_box.SetToolTipString("Dose limitation for each dataset. KUMA does not recommend dose over 15 MGy.")
        self.label_19_copy_3_copy_1_copy_copy.SetMinSize((50, 30))
        self.label_20.SetMinSize((80, 30))
        self.wl_box_multi.SetMinSize((80, 30))
        self.wl_box_multi.SetBackgroundColour(wx.Colour(192, 192, 192))
        self.label_21.SetMinSize((60, 30))
        self.label_20_copy.SetMinSize((80, 30))
        self.ncry_box_multi.SetMinSize((60, 30))
        self.ncry_box_multi.SetBackgroundColour(wx.Colour(192, 192, 192))
        self.label_21_copy.SetMinSize((60, 30))
        self.label_20_copy_1.SetMinSize((80, 30))
        self.edge_res_multi.SetMinSize((60, 30))
        self.edge_res_multi.SetBackgroundColour(wx.Colour(192, 192, 192))
        self.label_21_copy_1.SetMinSize((60, 30))
        self.label_20_copy_3.SetMinSize((80, 30))
        self.label_20_copy_3.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.startphi_multi.SetMinSize((60, 30))
        self.startphi_multi.SetBackgroundColour(wx.Colour(192, 192, 192))
        self.label_20_copy_3_copy.SetMinSize((30, 30))
        self.label_20_copy_3_copy.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.end_phi_multi.SetMinSize((60, 30))
        self.end_phi_multi.SetBackgroundColour(wx.Colour(192, 192, 192))
        self.label_21_copy_3_copy.SetMinSize((60, 30))
        self.label_21_copy_3_copy.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.label_20_copy_1_copy.SetMinSize((80, 30))
        self.totalExpMultiBox.SetMinSize((60, 30))
        self.totalExpMultiBox.SetBackgroundColour(wx.Colour(192, 192, 192))
        self.label_21_copy_1_copy.SetMinSize((60, 30))
        self.label_20_copy_1_copy_copy_1.SetMinSize((80, 30))
        self.totalExpMultiBox_copy.SetMinSize((60, 30))
        self.totalExpMultiBox_copy.SetBackgroundColour(wx.Colour(192, 192, 192))
        self.label_21_copy_1_copy_copy_1.SetMinSize((60, 30))
        self.label_20_copy_2.SetMinSize((80, 30))
        self.att_thick_multi.SetMinSize((80, 30))
        self.att_thick_multi.SetBackgroundColour(wx.Colour(192, 192, 192))
        self.label_21_copy_2.SetMinSize((60, 30))
        self.label_20_copy_1_copy_copy.SetMinSize((80, 30))
        self.phsPerDegBoxMulti.SetMinSize((80, 30))
        self.phsPerDegBoxMulti.SetBackgroundColour(wx.Colour(192, 192, 192))
        self.label_21_copy_1_copy_copy.SetMinSize((80, 30))
        self.label_20_copy_1_copy_copy_copy.SetMinSize((80, 30))
        self.FFexptimeBox.SetMinSize((80, 27))
        self.FFexptimeBox.SetBackgroundColour(wx.Colour(192, 192, 192))
        self.label_21_copy_1_copy_copy_copy.SetMinSize((80, 30))
        self.appendButton.SetMinSize((117, 32))
        self.deleteButton.SetMinSize((117, 32))
        self.clearAllButton.SetMinSize((117, 32))
        self.button_6_copy.SetMinSize((117, 32))
        self.label_1_copy.SetMinSize((156, 25))
        self.inputComment.SetMinSize((200, 25))
        self.list_ctrl_1.SetMinSize((300,200))
        self.button_6.SetMinSize((150, 32))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame2.__do_layout
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_6_copy = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "List"), wx.HORIZONTAL)
        sizer_7 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "LIST"), wx.VERTICAL)
        sizer_13 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_32 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Comment"), wx.HORIZONTAL)
        sizer_29 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Action"), wx.VERTICAL)
        sizer_6 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Centering"), wx.HORIZONTAL)
        sizer_17 = wx.BoxSizer(wx.VERTICAL)
        sizer_33 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_38_copy = wx.StaticBoxSizer(wx.StaticBox(self.notebook_1_pane_5, wx.ID_ANY, "Parameters"), wx.VERTICAL)
        sizer_43 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_39_copy_1_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_39_copy_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_37 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_38 = wx.StaticBoxSizer(wx.StaticBox(self.notebook_1_pane_5, wx.ID_ANY, "Conditions"), wx.VERTICAL)
        sizer_42 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_39_copy_1_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_39_copy_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_39_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_39_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_39 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_15 = wx.BoxSizer(wx.VERTICAL)
        sizer_35_copy_2_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_41 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_35_copy_2_copy_copy_1_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_35_copy_2_copy_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_35_copy_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_35_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_35_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_35 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_21 = wx.BoxSizer(wx.VERTICAL)
        sizer_3_copy_1 = wx.StaticBoxSizer(wx.StaticBox(self.notebook_1_pane_5, wx.ID_ANY, "List"), wx.VERTICAL)
        sizer_34_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_36 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4_copy_copy_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_34 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_3_copy_copy_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_5_copy_copy_1 = wx.StaticBoxSizer(wx.StaticBox(self.notebook_1_pane_2_copy, wx.ID_ANY, ""), wx.HORIZONTAL)
        sizer_6_copy_1_copy_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_7_copy_copy_1_copy_copy_1_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7_copy_copy_1_copy_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7_copy_copy_1_copy_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_22_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2_copy_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_3_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_6_copy_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_7_copy_copy_1_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7_copy_copy_1_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7_copy_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_22 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10_copy_2_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_11_copy_1_copy_1_copy_1_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11_copy_1_copy_1_copy_3_copy_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11_copy_1_copy_1_copy_1_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11_copy_1_copy_1_copy_3_copy_copy_copy_copy_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11_copy_1_copy_1_copy_3_copy_copy_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10_copy_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_11_copy_1_copy_1_copy_3_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11_copy_1_copy_1_copy_3_copy_copy_copy_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11_copy_1_copy_1_copy_3_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11_copy_1_copy_1_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11_copy_1_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11_copy_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_12_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_7_copy_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4_copy_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_23 = wx.BoxSizer(wx.VERTICAL)
        sizer_25 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_19 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_18 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_40 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_24 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_30 = wx.StaticBoxSizer(wx.StaticBox(self.panel_1, wx.ID_ANY, ""), wx.HORIZONTAL)
        sizer_31_copy_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_31_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_31 = wx.BoxSizer(wx.VERTICAL)
        sizer_27 = wx.BoxSizer(wx.VERTICAL)
        sizer_24_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_28 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_28_copy_2_copy_copy_copy_copy_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_28_copy_2_copy_copy_copy_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_28_copy_2_copy_copy_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_28_copy_2_copy_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_28_copy_2_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_28_copy_2_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_28_copy_2_copy_copy_copy_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_28_copy_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_28_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_28_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.StaticBoxSizer(wx.StaticBox(self.notebook_1_pane_1, wx.ID_ANY, ""), wx.HORIZONTAL)
        sizer_9_copy_1_copy = wx.StaticBoxSizer(wx.StaticBox(self.notebook_1_pane_1, wx.ID_ANY, ""), wx.VERTICAL)
        sizer_20_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_20 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11_copy_4_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11_copy_4_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11_copy_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9_copy_1 = wx.StaticBoxSizer(wx.StaticBox(self.notebook_1_pane_1, wx.ID_ANY, ""), wx.VERTICAL)
        sizer_11_copy_3_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11_copy_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11_copy_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9_copy = wx.StaticBoxSizer(wx.StaticBox(self.notebook_1_pane_1, wx.ID_ANY, ""), wx.VERTICAL)
        sizer_2_copy_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2_copy_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2_copy_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9 = wx.StaticBoxSizer(wx.StaticBox(self.notebook_1_pane_1, wx.ID_ANY, ""), wx.VERTICAL)
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9.Add(self.label_4_copy, 0, 0, 0)
        sizer_10.Add((100, 50), 0, 0, 0)
        sizer_10.Add(self.button_1_copy, 0, 0, 0)
        sizer_10.Add((75, 50), 0, 0, 0)
        sizer_9.Add(sizer_10, 1, wx.EXPAND, 0)
        sizer_10_copy.Add(self.button_1, 0, 0, 0)
        sizer_10_copy.Add((20, 20), 0, 0, 0)
        sizer_10_copy.Add(self.distBox, 0, wx.RIGHT, 0)
        sizer_10_copy.Add(self.label_2, 0, 0, 0)
        sizer_10_copy.Add((5, 20), 0, 0, 0)
        sizer_10_copy.Add(self.button_1_copy_2, 0, 0, 0)
        sizer_9.Add(sizer_10_copy, 1, wx.EXPAND, 0)
        sizer_10_copy_1.Add((100, 50), 0, 0, 0)
        sizer_10_copy_1.Add(self.button_1_copy_1, 0, 0, 0)
        sizer_10_copy_1.Add((75, 50), 0, 0, 0)
        sizer_9.Add(sizer_10_copy_1, 1, wx.EXPAND, 0)
        sizer_9.Add((20, 20), 0, 0, 0)
        sizer_1.Add(self.button_2, 0, 0, 0)
        sizer_1.Add((8, 20), 0, 0, 0)
        sizer_1.Add(self.label_3, 0, 0, 0)
        sizer_1.Add((8, 20), 0, 0, 0)
        sizer_1.Add(self.button_2_copy, 0, 0, 0)
        sizer_9.Add(sizer_1, 1, wx.EXPAND, 0)
        sizer_4.Add(sizer_9, 0, wx.EXPAND, 0)
        sizer_9_copy.Add(self.label_4, 0, 0, 0)
        sizer_2.Add((40, 20), 0, 0, 0)
        sizer_2.Add(self.button_3, 0, 0, 0)
        sizer_9_copy.Add(sizer_2, 1, wx.EXPAND, 0)
        sizer_2_copy_copy.Add((40, 20), 0, 0, 0)
        sizer_2_copy_copy.Add(self.button_3_copy_copy, 0, 0, 0)
        sizer_9_copy.Add(sizer_2_copy_copy, 1, wx.EXPAND, 0)
        sizer_2_copy.Add((40, 20), 0, 0, 0)
        sizer_2_copy.Add(self.button_3_copy, 0, 0, 0)
        sizer_9_copy.Add(sizer_2_copy, 1, wx.EXPAND, 0)
        sizer_2_copy_1.Add((40, 20), 0, 0, 0)
        sizer_2_copy_1.Add(self.phiBox, 0, 0, 0)
        sizer_9_copy.Add(sizer_2_copy_1, 1, wx.EXPAND, 0)
        sizer_2_copy_2.Add((40, 20), 0, 0, 0)
        sizer_2_copy_2.Add(self.button_3_copy_1, 0, 0, 0)
        sizer_9_copy.Add(sizer_2_copy_2, 1, wx.EXPAND, 0)
        sizer_2_copy_copy_1.Add((40, 20), 0, 0, 0)
        sizer_2_copy_copy_1.Add(self.button_3_copy_copy_1, 0, 0, 0)
        sizer_9_copy.Add(sizer_2_copy_copy_1, 1, wx.EXPAND, 0)
        sizer_2_copy_3.Add((40, 20), 0, 0, 0)
        sizer_2_copy_3.Add(self.button_3_copy_2, 0, 0, 0)
        sizer_9_copy.Add(sizer_2_copy_3, 1, wx.EXPAND, 0)
        sizer_4.Add(sizer_9_copy, 0, wx.EXPAND, 0)
        sizer_9_copy_1.Add(self.label_7, 0, 0, 0)
        sizer_11.Add(self.label_6, 0, 0, 0)
        sizer_11.Add(self.currGonioX, 0, 0, 0)
        sizer_11.Add(self.label_6_copy_4, 0, 0, 0)
        sizer_9_copy_1.Add(sizer_11, 1, wx.EXPAND, 0)
        sizer_11_copy.Add(self.label_6_copy, 0, 0, 0)
        sizer_11_copy.Add(self.currGonioY, 0, 0, 0)
        sizer_11_copy.Add(self.label_6_copy_4_copy, 0, 0, 0)
        sizer_9_copy_1.Add(sizer_11_copy, 1, wx.EXPAND, 0)
        sizer_11_copy_1.Add(self.label_6_copy_1, 0, 0, 0)
        sizer_11_copy_1.Add(self.currGonioZ, 0, 0, 0)
        sizer_11_copy_1.Add(self.label_6_copy_4_copy_1, 0, 0, 0)
        sizer_9_copy_1.Add(sizer_11_copy_1, 1, wx.EXPAND, 0)
        sizer_11_copy_2.Add(self.label_6_copy_2, 0, 0, 0)
        sizer_11_copy_2.Add(self.currGonioZZ, 0, 0, 0)
        sizer_11_copy_2.Add(self.label_6_copy_4_copy_2, 0, 0, 0)
        sizer_9_copy_1.Add(sizer_11_copy_2, 1, wx.EXPAND, 0)
        sizer_11_copy_3.Add(self.label_6_copy_3, 0, 0, 0)
        sizer_11_copy_3.Add(self.currPhi, 0, 0, 0)
        sizer_11_copy_3.Add(self.label_6_copy_4_copy_3, 0, 0, 0)
        sizer_9_copy_1.Add(sizer_11_copy_3, 1, wx.EXPAND, 0)
        sizer_11_copy_3_copy.Add((20, 20), 0, 0, 0)
        sizer_11_copy_3_copy.Add(self.button_5, 0, 0, 0)
        sizer_11_copy_3_copy.Add((20, 20), 0, 0, 0)
        sizer_9_copy_1.Add(sizer_11_copy_3_copy, 1, wx.EXPAND, 0)
        sizer_4.Add(sizer_9_copy_1, 0, wx.EXPAND, 0)
        sizer_9_copy_1_copy.Add(self.label_7_copy, 0, 0, 0)
        sizer_11_copy_4.Add(self.button_4, 0, 0, 0)
        sizer_9_copy_1_copy.Add(sizer_11_copy_4, 1, wx.EXPAND, 0)
        sizer_11_copy_4_copy.Add((20, 40), 0, 0, 0)
        sizer_9_copy_1_copy.Add(sizer_11_copy_4_copy, 1, wx.EXPAND, 0)
        sizer_11_copy_4_copy_copy.Add(self.button_8, 0, 0, 0)
        sizer_9_copy_1_copy.Add(sizer_11_copy_4_copy_copy, 1, wx.EXPAND, 0)
        sizer_9_copy_1_copy.Add((20, 20), 0, 0, 0)
        sizer_20.Add(self.checkbox_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_9_copy_1_copy.Add(sizer_20, 1, wx.EXPAND, 0)
        sizer_20_copy.Add(self.checkbox_2_copy, 0, 0, 0)
        sizer_9_copy_1_copy.Add(sizer_20_copy, 1, wx.EXPAND, 0)
        sizer_9_copy_1_copy.Add(self.evacManual, 0, 0, 0)
        sizer_4.Add(sizer_9_copy_1_copy, 0, wx.EXPAND, 0)
        sizer_4.Add(self.bitmap_1, 0, 0, 0)
        self.notebook_1_pane_1.SetSizer(sizer_4)
        sizer_27.Add(self.label_17, 0, 0, 0)
        sizer_28_copy.Add((20, 20), 0, 0, 0)
        sizer_28_copy.Add(self.label_12_copy, 0, wx.ALIGN_CENTER, 0)
        sizer_28_copy.Add(self.dCellBox, 0, 0, 0)
        sizer_28_copy.Add(self.label_12_copy_4, 0, wx.ALIGN_CENTER, 0)
        sizer_27.Add(sizer_28_copy, 0, wx.EXPAND, 0)
        sizer_28_copy_1.Add((20, 20), 0, 0, 0)
        sizer_28_copy_1.Add(self.label_12_copy_1, 0, wx.ALIGN_CENTER, 0)
        sizer_28_copy_1.Add(self.dNresBox, 0, 0, 0)
        sizer_28_copy_1.Add(self.label_12_copy_5, 0, 0, 0)
        sizer_27.Add(sizer_28_copy_1, 0, wx.EXPAND, 0)
        sizer_28_copy_2.Add((20, 20), 0, 0, 0)
        sizer_28_copy_2.Add(self.label_12_copy_2, 0, wx.ALIGN_CENTER, 0)
        sizer_28_copy_2.Add(self.dNchainsBox, 0, 0, 0)
        sizer_28_copy_2.Add(self.label_12_copy_6, 0, 0, 0)
        sizer_27.Add(sizer_28_copy_2, 0, wx.EXPAND, 0)
        sizer_28_copy_2_copy_copy_copy_copy_1.Add((20, 20), 0, 0, 0)
        sizer_28_copy_2_copy_copy_copy_copy_1.Add(self.label_12_copy_2_copy_copy_copy_copy_1, 0, wx.ALIGN_CENTER, 0)
        sizer_28_copy_2_copy_copy_copy_copy_1.Add(self.dSolventFractionBox, 0, 0, 0)
        sizer_28_copy_2_copy_copy_copy_copy_1.Add(self.label_12_copy_6_copy_copy_copy_copy_1, 0, 0, 0)
        sizer_27.Add(sizer_28_copy_2_copy_copy_copy_copy_1, 0, wx.EXPAND, 0)
        sizer_28_copy_2_copy.Add((20, 20), 0, 0, 0)
        sizer_28_copy_2_copy.Add(self.label_12_copy_2_copy, 0, wx.ALIGN_CENTER, 0)
        sizer_28_copy_2_copy.Add(self.dHABox, 0, 0, 0)
        sizer_28_copy_2_copy.Add(self.label_12_copy_6_copy, 0, 0, 0)
        sizer_27.Add(sizer_28_copy_2_copy, 0, wx.EXPAND, 0)
        sizer_28_copy_2_copy_copy.Add((20, 20), 0, 0, 0)
        sizer_28_copy_2_copy_copy.Add(self.label_12_copy_2_copy_copy, 0, wx.ALIGN_CENTER, 0)
        sizer_28_copy_2_copy_copy.Add(self.dIonBox, 0, 0, 0)
        sizer_28_copy_2_copy_copy.Add(self.label_12_copy_6_copy_copy, 0, 0, 0)
        sizer_27.Add(sizer_28_copy_2_copy_copy, 0, wx.EXPAND, 0)
        sizer_28_copy_2_copy_copy_copy.Add((20, 20), 0, 0, 0)
        sizer_28_copy_2_copy_copy_copy.Add(self.label_12_copy_2_copy_copy_copy, 0, wx.ALIGN_CENTER, 0)
        sizer_28_copy_2_copy_copy_copy.Add(self.dCrySizeBox, 0, 0, 0)
        sizer_28_copy_2_copy_copy_copy.Add(self.label_12_copy_6_copy_copy_copy, 0, 0, 0)
        sizer_27.Add(sizer_28_copy_2_copy_copy_copy, 0, wx.EXPAND, 0)
        sizer_28_copy_2_copy_copy_copy_copy.Add((20, 20), 0, 0, 0)
        sizer_28_copy_2_copy_copy_copy_copy.Add(self.label_12_copy_2_copy_copy_copy_copy, 0, wx.ALIGN_CENTER, 0)
        sizer_28_copy_2_copy_copy_copy_copy.Add(self.dBeamSizeBox, 0, 0, 0)
        sizer_28_copy_2_copy_copy_copy_copy.Add(self.label_12_copy_6_copy_copy_copy_copy, 0, 0, 0)
        sizer_27.Add(sizer_28_copy_2_copy_copy_copy_copy, 0, wx.EXPAND, 0)
        sizer_28_copy_2_copy_copy_copy_copy_copy.Add((20, 20), 0, 0, 0)
        sizer_28_copy_2_copy_copy_copy_copy_copy.Add(self.label_12_copy_2_copy_copy_copy_copy_copy, 0, wx.ALIGN_CENTER, 0)
        sizer_28_copy_2_copy_copy_copy_copy_copy.Add(self.dFluxBox, 0, 0, 0)
        sizer_28_copy_2_copy_copy_copy_copy_copy.Add(self.label_12_copy_6_copy_copy_copy_copy_copy, 0, 0, 0)
        sizer_27.Add(sizer_28_copy_2_copy_copy_copy_copy_copy, 0, wx.EXPAND, 0)
        sizer_28_copy_2_copy_copy_copy_copy_copy_copy.Add((20, 20), 0, 0, 0)
        sizer_28_copy_2_copy_copy_copy_copy_copy_copy.Add(self.label_10, 0, wx.ALIGN_CENTER, 0)
        sizer_28_copy_2_copy_copy_copy_copy_copy_copy.Add(self.dWLBox, 0, 0, 0)
        sizer_28_copy_2_copy_copy_copy_copy_copy_copy.Add(self.label_12_copy_6_copy_copy_copy_copy_copy_copy, 0, 0, 0)
        sizer_27.Add(sizer_28_copy_2_copy_copy_copy_copy_copy_copy, 0, wx.EXPAND, 0)
        sizer_28.Add(self.static_line_3, 0, wx.EXPAND, 0)
        sizer_27.Add(sizer_28, 0, wx.EXPAND, 0)
        sizer_27.Add((20, 20), 0, 0, 0)
        sizer_24_copy.Add(self.label_12, 0, 0, 0)
        sizer_24_copy.Add(self.dResetConditionButton, 0, 0, 0)
        sizer_24_copy.Add((80, 20), 0, 0, 0)
        sizer_24_copy.Add(self.dDoseEstimationButton, 0, 0, 0)
        sizer_27.Add(sizer_24_copy, 0, wx.EXPAND, 0)
        sizer_24.Add(sizer_27, 0, wx.EXPAND, 0)
        sizer_31.Add(self.label_14, 0, wx.ALIGN_CENTER, 0)
        sizer_31.Add(self.label_14_copy, 0, wx.ALIGN_CENTER, 0)
        sizer_31.Add(self.label_14_copy_1, 0, wx.ALIGN_CENTER, 0)
        sizer_31.Add(self.label_14_copy_2, 0, wx.ALIGN_CENTER, 0)
        sizer_31.Add((20, 50), 0, 0, 0)
        sizer_31.Add(self.label_14_copy_7, 0, wx.ALIGN_CENTER, 0)
        sizer_31.Add(self.label_14_copy_7_copy, 0, wx.ALIGN_CENTER, 0)
        sizer_31.Add(self.label_14_copy_7_copy_copy, 0, wx.ALIGN_CENTER, 0)
        sizer_30.Add(sizer_31, 1, wx.EXPAND, 0)
        sizer_31_copy.Add(self.dDoseDisp, 0, wx.ALIGN_CENTER, 0)
        sizer_31_copy.Add(self.dAbsDisp, 0, wx.ALIGN_CENTER, 0)
        sizer_31_copy.Add(self.dTempRiseDisp, 0, wx.ALIGN_CENTER, 0)
        sizer_31_copy.Add(self.toHendersonLimitBox, 0, wx.ALIGN_CENTER, 0)
        sizer_31_copy.Add((20, 50), 0, 0, 0)
        sizer_31_copy.Add(self.dDesiredDoseBox, 0, 0, 0)
        sizer_31_copy.Add(self.dMaxRDBox, 0, 0, 0)
        sizer_31_copy.Add(self.dAttFactorBox, 0, 0, 0)
        sizer_30.Add(sizer_31_copy, 1, wx.EXPAND, 0)
        sizer_31_copy_1.Add(self.label_14_copy_3, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_31_copy_1.Add(self.label_14_copy_5, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_31_copy_1.Add(self.label_14_copy_4, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_31_copy_1.Add(self.label_14_copy_6, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_31_copy_1.Add((20, 50), 0, 0, 0)
        sizer_31_copy_1.Add(self.label_14_copy_3_copy, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_31_copy_1.Add(self.label_14_copy_3_copy_copy, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_31_copy_1.Add(self.button_7, 0, 0, 0)
        sizer_30.Add(sizer_31_copy_1, 1, wx.EXPAND, 0)
        sizer_24.Add(sizer_30, 0, wx.EXPAND, 0)
        self.panel_1.SetSizer(sizer_24)
        sizer_40.Add(self.label_22, 0, 0, 0)
        sizer_40.Add(self.wavelengthBox, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_40.Add(self.label_22_copy, 0, 0, 0)
        sizer_40.Add(self.buttonGetWL, 0, 0, 0)
        sizer_23.Add(sizer_40, 1, wx.EXPAND, 0)
        sizer_23.Add(self.label_1, 0, 0, 0)
        sizer_18.Add((20, 20), 0, 0, 0)
        sizer_18.Add(self.label_16, 0, 0, 0)
        sizer_23.Add(sizer_18, 0, wx.EXPAND, 0)
        sizer_19.Add((20, 20), 0, 0, 0)
        sizer_19.Add(self.label_16_copy, 0, 0, 0)
        sizer_23.Add(sizer_19, 1, wx.EXPAND, 0)
        sizer_23.Add((20, 20), 0, 0, 0)
        sizer_25.Add((20, 20), 0, 0, 0)
        sizer_25.Add(self.button_7_copy, 0, 0, 0)
        sizer_25.Add((20, 20), 0, 0, 0)
        sizer_25.Add(self.tuneLogTextBox, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_25.Add((20, 20), 0, 0, 0)
        sizer_23.Add(sizer_25, 0, wx.EXPAND, 0)
        sizer_23.Add((20, 40), 0, 0, 0)
        self.notebook_1_pane_3.SetSizer(sizer_23)
        sizer_4_copy.Add(self.label_1_copy_1, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_4_copy.Add(self.direBox, 0, 0, 0)
        sizer_4_copy.Add(self.button_9, 0, 0, 0)
        sizer_12_copy.Add(sizer_4_copy, 0, wx.EXPAND, 0)
        sizer_4_copy_copy.Add(self.label_1_copy_copy, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_4_copy_copy.Add(self.prefixBox, 0, 0, 0)
        sizer_4_copy_copy.Add((50, 30), 0, 0, 0)
        sizer_4_copy_copy.Add(self.label_2_copy, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_4_copy_copy.Add(self.serialBox, 0, 0, 0)
        sizer_12_copy.Add(sizer_4_copy_copy, 0, wx.EXPAND, 0)
        sizer_12_copy.Add((20, 20), 0, 0, 0)
        sizer_4_copy_copy_copy.Add(self.label_1_copy_copy_copy, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_4_copy_copy_copy.Add(self.beamsizePullDown, 0, wx.ALIGN_CENTER, 0)
        sizer_12_copy.Add(sizer_4_copy_copy_copy, 0, wx.EXPAND, 0)
        sizer_12_copy.Add(self.static_line_2, 0, wx.EXPAND, 0)
        sizer_7_copy.Add(self.label_3_copy, 0, 0, 0)
        sizer_7_copy.Add(self.oscStartBox, 0, 0, 0)
        sizer_7_copy.Add(self.label_4_copy_copy, 0, 0, 0)
        sizer_7_copy.Add(self.oscEndBox, 0, 0, 0)
        sizer_7_copy.Add(self.label_4_copy_copy_copy, 0, 0, 0)
        sizer_7_copy.Add(self.oscStepBox, 0, 0, 0)
        sizer_7_copy.Add(self.label_4_copy_copy_copy_copy, 0, 0, 0)
        sizer_7_copy.Add((20, 20), 0, 0, 0)
        sizer_7_copy.Add(self.setCurrentPhiButton, 0, 0, 0)
        sizer_12_copy.Add(sizer_7_copy, 1, wx.EXPAND, 0)
        sizer_7_copy_copy.Add(self.label_3_copy_copy, 0, 0, 0)
        sizer_7_copy_copy.Add(self.exptimeBox, 0, 0, 0)
        sizer_7_copy_copy.Add(self.label_4_copy_copy_1, 0, 0, 0)
        sizer_7_copy_copy.Add((20, 25), 0, 0, 0)
        sizer_7_copy_copy.Add(self.wlBox_copy, 0, 0, 0)
        sizer_7_copy_copy.Add(self.wavelenBox, 0, 0, 0)
        sizer_7_copy_copy.Add(self.label_4_copy_copy_1_copy, 0, 0, 0)
        sizer_7_copy_copy.Add((20, 25), 0, 0, 0)
        sizer_7_copy_copy.Add(self.expBox, 0, 0, 0)
        sizer_7_copy_copy.Add(self.camelenBox, 0, 0, 0)
        sizer_7_copy_copy.Add(self.label_4_copy_copy_1_copy_copy, 0, 0, 0)
        sizer_12_copy.Add(sizer_7_copy_copy, 1, wx.EXPAND, 0)
        sizer_7_copy_copy_copy.Add(self.label_3_copy_copy_copy, 0, 0, 0)
        sizer_7_copy_copy_copy.Add(self.attPullDown, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_7_copy_copy_copy.Add(self.label_4_copy_1, 0, 0, 0)
        sizer_7_copy_copy_copy.Add((50, 20), 0, 0, 0)
        sizer_7_copy_copy_copy.Add(self.checkbox_3, 0, 0, 0)
        sizer_12_copy.Add(sizer_7_copy_copy_copy, 1, wx.EXPAND, 0)
        sizer_12.Add(sizer_12_copy, 0, wx.EXPAND, 0)
        sizer_12.Add(self.static_line_1, 0, wx.EXPAND, 0)
        sizer_10_copy_2.Add(self.label_9_copy_1, 0, 0, 0)
        sizer_11_copy_5.Add(self.label_10_copy_1, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_11_copy_5.Add(self.edgeResolSimuBox, 0, 0, 0)
        sizer_11_copy_5.Add(self.label_11, 0, 0, 6)
        sizer_10_copy_2.Add(sizer_11_copy_5, 1, wx.EXPAND, 0)
        sizer_11_copy_1_copy.Add(self.label_10_copy_copy, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_11_copy_1_copy.Add(self.attSimuBox, 0, 0, 0)
        sizer_11_copy_1_copy.Add(self.label_11_copy_copy, 0, 0, 0)
        sizer_10_copy_2.Add(sizer_11_copy_1_copy, 1, wx.EXPAND, 0)
        sizer_11_copy_1_copy_1_copy_1.Add(self.label_10_copy_copy_copy_copy_1, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_11_copy_1_copy_1_copy_1.Add(self.advancedLength, 0, 0, 0)
        sizer_11_copy_1_copy_1_copy_1.Add(self.label_11_copy_copy_2, 0, 0, 0)
        sizer_10_copy_2.Add(sizer_11_copy_1_copy_1_copy_1, 1, wx.EXPAND, 0)
        sizer_11_copy_1_copy_1_copy_3_copy.Add(self.label_10_copy_copy_copy_copy_3_copy, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_11_copy_1_copy_1_copy_3_copy.Add(self.FluxBox, 0, 0, 0)
        sizer_11_copy_1_copy_1_copy_3_copy.Add(self.label_11_copy_copy_4_copy, 0, 0, 0)
        sizer_10_copy_2.Add(sizer_11_copy_1_copy_1_copy_3_copy, 1, wx.EXPAND, 0)
        sizer_11_copy_1_copy_1_copy_3_copy_copy_copy_copy_copy.Add(self.label_10_copy_copy_copy_copy_3_copy_copy_copy_copy_copy, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_11_copy_1_copy_1_copy_3_copy_copy_copy_copy_copy.Add(self.numFrameBox, 0, 0, 0)
        sizer_11_copy_1_copy_1_copy_3_copy_copy_copy_copy_copy.Add(self.label_11_copy_copy_4_copy_copy_copy_copy_copy, 0, 0, 0)
        sizer_10_copy_2.Add(sizer_11_copy_1_copy_1_copy_3_copy_copy_copy_copy_copy, 1, wx.EXPAND, 0)
        sizer_11_copy_1_copy_1_copy_3_copy_copy.Add(self.label_10_copy_copy_copy_copy_3_copy_copy, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_11_copy_1_copy_1_copy_3_copy_copy.Add(self.photonsPerFrameBox, 0, 0, 0)
        sizer_11_copy_1_copy_1_copy_3_copy_copy.Add(self.label_11_copy_copy_4_copy_copy, 0, 0, 0)
        sizer_10_copy_2.Add(sizer_11_copy_1_copy_1_copy_3_copy_copy, 1, wx.EXPAND, 0)
        sizer_12.Add(sizer_10_copy_2, 1, wx.EXPAND, 1)
        sizer_10_copy_2_copy.Add(self.label_9_copy_1_copy, 0, 0, 0)
        sizer_11_copy_1_copy_1_copy_3_copy_copy_copy_copy.Add(self.label_10_copy_copy_copy_copy_3_copy_copy_copy_copy, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_11_copy_1_copy_1_copy_3_copy_copy_copy_copy.Add(self.totalExpBox, 0, 0, 0)
        sizer_11_copy_1_copy_1_copy_3_copy_copy_copy_copy.Add(self.label_11_copy_copy_4_copy_copy_copy_copy, 0, 0, 0)
        sizer_10_copy_2_copy.Add(sizer_11_copy_1_copy_1_copy_3_copy_copy_copy_copy, 1, wx.EXPAND, 0)
        sizer_11_copy_1_copy_1_copy_3_copy_copy_copy_copy_copy_1.Add(self.label_10_copy_copy_copy_copy_3_copy_copy_copy_copy_copy_1, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_11_copy_1_copy_1_copy_3_copy_copy_copy_copy_copy_1.Add(self.phsPerRotBox, 0, 0, 0)
        sizer_11_copy_1_copy_1_copy_3_copy_copy_copy_copy_copy_1.Add(self.label_11_copy_copy_4_copy_copy_copy_copy_copy_1, 0, 0, 0)
        sizer_10_copy_2_copy.Add(sizer_11_copy_1_copy_1_copy_3_copy_copy_copy_copy_copy_1, 1, wx.EXPAND, 0)
        sizer_11_copy_1_copy_1_copy_1_copy.Add(self.label_10_copy_copy_copy_copy_1_copy, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_11_copy_1_copy_1_copy_1_copy.Add(self.transSpeedBox, 0, 0, 0)
        sizer_11_copy_1_copy_1_copy_1_copy.Add(self.label_11_copy_copy_2_copy, 0, 0, 0)
        sizer_10_copy_2_copy.Add(sizer_11_copy_1_copy_1_copy_1_copy, 1, wx.EXPAND, 0)
        sizer_11_copy_1_copy_1_copy_3_copy_copy_copy.Add(self.label_10_copy_copy_copy_copy_3_copy_copy_copy, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_11_copy_1_copy_1_copy_3_copy_copy_copy.Add(self.rotSpeedBox, 0, 0, 0)
        sizer_11_copy_1_copy_1_copy_3_copy_copy_copy.Add(self.label_11_copy_copy_4_copy_copy_copy, 0, 0, 0)
        sizer_10_copy_2_copy.Add(sizer_11_copy_1_copy_1_copy_3_copy_copy_copy, 1, wx.EXPAND, 0)
        sizer_11_copy_1_copy_1_copy_1_copy_copy.Add(self.label_10_copy_copy_copy_copy_1_copy_copy, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_11_copy_1_copy_1_copy_1_copy_copy.Add(self.countRateBox, 0, 0, 0)
        sizer_11_copy_1_copy_1_copy_1_copy_copy.Add(self.label_11_copy_copy_2_copy_copy, 0, 0, 0)
        sizer_10_copy_2_copy.Add(sizer_11_copy_1_copy_1_copy_1_copy_copy, 1, wx.EXPAND, 0)
        sizer_12.Add(sizer_10_copy_2_copy, 1, wx.EXPAND, 0)
        sizer_1_copy.Add(sizer_12, 1, wx.EXPAND, 0)
        sizer_6_copy_1.Add((20, 20), 0, 0, 0)
        sizer_22.Add(self.checkbox_1, 0, 0, 0)
        sizer_22.Add((100, 20), 0, 0, 0)
        sizer_22.Add(self.label_15, 0, 0, 0)
        sizer_22.Add((50, 20), 0, 0, 0)
        sizer_22.Add(self.label_15_copy, 0, 0, 0)
        sizer_22.Add((50, 20), 0, 0, 0)
        sizer_22.Add(self.label_15_copy_1, 0, 0, 0)
        sizer_22.Add((150, 20), 0, 0, 0)
        sizer_22.Add(self.label_4_copy_1_copy_copy_1_copy_2_copy_copy, 0, 0, 0)
        sizer_6_copy_1.Add(sizer_22, 0, wx.EXPAND, 0)
        sizer_7_copy_copy_1.Add(self.vec1Box, 0, 0, 0)
        sizer_7_copy_copy_1.Add(self.vec1XBox, 0, 0, 0)
        sizer_7_copy_copy_1.Add((20, 25), 0, 0, 0)
        sizer_7_copy_copy_1.Add(self.vec1YBox, 0, 0, 0)
        sizer_7_copy_copy_1.Add((20, 25), 0, 0, 0)
        sizer_7_copy_copy_1.Add(self.vec1ZBox, 0, 0, 0)
        sizer_7_copy_copy_1.Add((20, 20), 0, 0, 0)
        sizer_7_copy_copy_1.Add(self.setVec1Button, 0, 0, 0)
        sizer_7_copy_copy_1.Add((50, 20), 0, 0, 0)
        sizer_7_copy_copy_1.Add(self.label_9, 0, wx.ALIGN_RIGHT, 0)
        sizer_7_copy_copy_1.Add(self.dispARDbox, 0, 0, 0)
        sizer_7_copy_copy_1.Add(self.label_4_copy_1_copy_copy_1_copy_2_copy, 0, 0, 0)
        sizer_7_copy_copy_1.Add((80, 20), 0, 0, 0)
        sizer_7_copy_copy_1.Add(self.checkButton, 0, 0, 0)
        sizer_6_copy_1.Add(sizer_7_copy_copy_1, 0, wx.EXPAND, 0)
        sizer_7_copy_copy_1_copy.Add(self.vec1Box_copy, 0, 0, 0)
        sizer_7_copy_copy_1_copy.Add(self.vec2XBox, 0, 0, 0)
        sizer_7_copy_copy_1_copy.Add((20, 25), 0, 0, 0)
        sizer_7_copy_copy_1_copy.Add(self.vec2YBox, 0, 0, 0)
        sizer_7_copy_copy_1_copy.Add((20, 25), 0, 0, 0)
        sizer_7_copy_copy_1_copy.Add(self.vec2ZBox, 0, 0, 0)
        sizer_7_copy_copy_1_copy.Add((20, 20), 0, 0, 0)
        sizer_7_copy_copy_1_copy.Add(self.setVec2Button, 0, 0, 0)
        sizer_7_copy_copy_1_copy.Add((50, 20), 0, 0, 0)
        sizer_7_copy_copy_1_copy.Add(self.label_9_copy, 0, wx.ALIGN_RIGHT, 0)
        sizer_7_copy_copy_1_copy.Add(self.dispSuitAttBox, 0, 0, 0)
        sizer_7_copy_copy_1_copy.Add(self.label_4_copy_1_copy_copy_1_copy_2, 0, 0, 0)
        sizer_7_copy_copy_1_copy.Add((80, 20), 0, 0, 0)
        sizer_7_copy_copy_1_copy.Add(self.makeOutput, 0, 0, 0)
        sizer_6_copy_1.Add(sizer_7_copy_copy_1_copy, 0, wx.EXPAND, 0)
        sizer_7_copy_copy_1_copy_copy.Add((400, 25), 0, 0, 0)
        sizer_7_copy_copy_1_copy_copy.Add(self.vec1Box_copy_copy, 0, 0, 0)
        sizer_7_copy_copy_1_copy_copy.Add(self.checkbox_4, 0, 0, 0)
        sizer_7_copy_copy_1_copy_copy.Add(self.vec2YBox_copy_copy, 0, 0, 0)
        sizer_7_copy_copy_1_copy_copy.Add(self.label_9_copy_copy_1_copy_copy, 0, wx.ALIGN_RIGHT, 0)
        sizer_7_copy_copy_1_copy_copy.Add(self.vec2YBox_copy, 0, 0, 0)
        sizer_7_copy_copy_1_copy_copy.Add(self.label_9_copy_copy_1_copy, 0, wx.ALIGN_RIGHT, 0)
        sizer_6_copy_1.Add(sizer_7_copy_copy_1_copy_copy, 0, wx.EXPAND, 0)
        sizer_3_copy.Add(sizer_6_copy_1, 0, wx.EXPAND, 0)
        sizer_2_copy_4.Add(sizer_3_copy, 0, wx.EXPAND, 0)
        self.notebook_1_pane_1_copy.SetSizer(sizer_2_copy_4)
        sizer_22_copy_1.Add((100, 20), 0, 0, 0)
        sizer_22_copy_1.Add(self.label_15_copy_3, 0, 0, 0)
        sizer_22_copy_1.Add((50, 20), 0, 0, 0)
        sizer_22_copy_1.Add(self.label_15_copy_copy_1, 0, 0, 0)
        sizer_22_copy_1.Add((50, 20), 0, 0, 0)
        sizer_22_copy_1.Add(self.label_15_copy_1_copy_1, 0, 0, 0)
        sizer_22_copy_1.Add((150, 20), 0, 0, 0)
        sizer_6_copy_1_copy_1.Add(sizer_22_copy_1, 1, wx.EXPAND, 0)
        sizer_7_copy_copy_1_copy_2.Add(self.vec1Box_copy_2, 0, 0, 0)
        sizer_7_copy_copy_1_copy_2.Add(self.OrigXbox, 0, 0, 0)
        sizer_7_copy_copy_1_copy_2.Add((20, 25), 0, 0, 0)
        sizer_7_copy_copy_1_copy_2.Add(self.OrigYbox, 0, 0, 0)
        sizer_7_copy_copy_1_copy_2.Add((20, 25), 0, 0, 0)
        sizer_7_copy_copy_1_copy_2.Add(self.OrigZbox, 0, 0, 0)
        sizer_7_copy_copy_1_copy_2.Add((50, 20), 0, 0, 0)
        sizer_7_copy_copy_1_copy_2.Add(self.setOrigVecButton, 0, 0, 0)
        sizer_7_copy_copy_1_copy_2.Add((50, 20), 0, 0, 0)
        sizer_7_copy_copy_1_copy_2.Add((50, 20), 0, 0, 0)
        sizer_7_copy_copy_1_copy_2.Add(self.advFramePerPoint2d, 0, 0, 0)
        sizer_7_copy_copy_1_copy_2.Add(self.label_4_copy_1_copy_copy_1_copy_copy, 0, 0, 0)
        sizer_6_copy_1_copy_1.Add(sizer_7_copy_copy_1_copy_2, 1, wx.EXPAND, 0)
        sizer_7_copy_copy_1_copy_copy_1.Add(self.vec1Box_copy_copy_1, 0, 0, 0)
        sizer_7_copy_copy_1_copy_copy_1.Add(self.SlowXbox, 0, 0, 0)
        sizer_7_copy_copy_1_copy_copy_1.Add((20, 25), 0, 0, 0)
        sizer_7_copy_copy_1_copy_copy_1.Add(self.SlowYbox, 0, 0, 0)
        sizer_7_copy_copy_1_copy_copy_1.Add((20, 25), 0, 0, 0)
        sizer_7_copy_copy_1_copy_copy_1.Add(self.SlowZbox, 0, 0, 0)
        sizer_7_copy_copy_1_copy_copy_1.Add((50, 20), 0, 0, 0)
        sizer_7_copy_copy_1_copy_copy_1.Add(self.setSlowVecButton, 0, 0, 0)
        sizer_7_copy_copy_1_copy_copy_1.Add((50, 20), 0, 0, 0)
        sizer_7_copy_copy_1_copy_copy_1.Add(self.label_8_copy, 0, 0, 0)
        sizer_7_copy_copy_1_copy_copy_1.Add(self.slowNpts, 0, 0, 0)
        sizer_7_copy_copy_1_copy_copy_1.Add(self.label_4_copy_1_copy_copy_1_copy_1, 0, 0, 0)
        sizer_7_copy_copy_1_copy_copy_1.Add(self.checkButton_copy_1, 0, 0, 0)
        sizer_6_copy_1_copy_1.Add(sizer_7_copy_copy_1_copy_copy_1, 1, wx.EXPAND, 0)
        sizer_7_copy_copy_1_copy_copy_1_copy.Add(self.vec1Box_copy_copy_1_copy, 0, 0, 0)
        sizer_7_copy_copy_1_copy_copy_1_copy.Add(self.FastXbox, 0, 0, 0)
        sizer_7_copy_copy_1_copy_copy_1_copy.Add((20, 25), 0, 0, 0)
        sizer_7_copy_copy_1_copy_copy_1_copy.Add(self.FastYbox, 0, 0, 0)
        sizer_7_copy_copy_1_copy_copy_1_copy.Add((20, 25), 0, 0, 0)
        sizer_7_copy_copy_1_copy_copy_1_copy.Add(self.FastZbox, 0, 0, 0)
        sizer_7_copy_copy_1_copy_copy_1_copy.Add((50, 20), 0, 0, 0)
        sizer_7_copy_copy_1_copy_copy_1_copy.Add(self.setFastVecButton, 0, 0, 0)
        sizer_7_copy_copy_1_copy_copy_1_copy.Add((50, 20), 0, 0, 0)
        sizer_7_copy_copy_1_copy_copy_1_copy.Add(self.label_8_copy_1, 0, 0, 0)
        sizer_7_copy_copy_1_copy_copy_1_copy.Add(self.fastNpts, 0, 0, 0)
        sizer_7_copy_copy_1_copy_copy_1_copy.Add(self.label_4_copy_1_copy_copy_1_copy_1_copy, 0, 0, 0)
        sizer_7_copy_copy_1_copy_copy_1_copy.Add(self.makeOutput2D, 0, 0, 0)
        sizer_6_copy_1_copy_1.Add(sizer_7_copy_copy_1_copy_copy_1_copy, 1, wx.EXPAND, 0)
        sizer_5_copy_copy_1.Add(sizer_6_copy_1_copy_1, 0, wx.EXPAND, 0)
        sizer_3_copy_copy_1.Add(sizer_5_copy_copy_1, 0, wx.EXPAND, 0)
        self.notebook_1_pane_2_copy.SetSizer(sizer_3_copy_copy_1)
        self.notebook_1_copy.AddPage(self.notebook_1_pane_1_copy, "1D or Normal condition")
        self.notebook_1_copy.AddPage(self.notebook_1_pane_2_copy, "2D (Slow & Fast vector)")
        sizer_1_copy.Add(self.notebook_1_copy, 0, wx.EXPAND, 0)
        self.notebook_1_pane_4.SetSizer(sizer_1_copy)
        sizer_34.Add(self.label_18, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_34.Add(self.multi_dire_box, 0, 0, 0)
        sizer_34.Add(self.button_10, 0, 0, 0)
        sizer_17.Add(sizer_34, 0, wx.EXPAND, 0)
        sizer_17.Add((20, 30), 0, 0, 0)
        sizer_34_copy.Add(self.label_18_copy, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_34_copy.Add(self.prefix_box_multi, 0, 0, 0)
        sizer_34_copy.Add((200, 30), 0, 0, 0)
        sizer_4_copy_copy_copy_copy.Add(self.label_1_copy_copy_copy_copy, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_4_copy_copy_copy_copy.Add(self.beamsizePullDown2, 0, wx.ALIGN_CENTER, 0)
        sizer_34_copy.Add(sizer_4_copy_copy_copy_copy, 0, wx.EXPAND, 0)
        sizer_36.Add((20, 20), 0, 0, 0)
        sizer_36.Add(self.button_11_copy, 0, 0, 0)
        sizer_36.Add((20, 20), 0, 0, 0)
        sizer_36.Add(self.button_11, 0, 0, 0)
        sizer_34_copy.Add(sizer_36, 1, wx.EXPAND, 0)
        sizer_17.Add(sizer_34_copy, 0, wx.EXPAND, 0)
        sizer_33.Add(self.list_multi, 0, wx.ALIGN_CENTER, 0)
        sizer_3_copy_1.Add(self.appendButton_multi, 0, wx.ALL, 10)
        sizer_3_copy_1.Add(self.deleteButton_multi, 0, wx.ALL, 10)
        sizer_3_copy_1.Add(self.clearAllButton_multi, 0, wx.ALL, 10)
        sizer_21.Add(sizer_3_copy_1, 0, wx.ALL, 0)
        sizer_33.Add(sizer_21, 0, wx.EXPAND, 0)
        sizer_15.Add((20, 20), 0, 0, 0)
        sizer_35.Add(self.label_8, 0, wx.ALIGN_CENTER, 0)
        sizer_35.Add(self.midphi_multi, 0, wx.ALIGN_CENTER, 0)
        sizer_35.Add(self.label_19, 0, wx.ALIGN_CENTER, 0)
        sizer_15.Add(sizer_35, 1, wx.EXPAND, 0)
        sizer_35_copy.Add(self.label_8_copy_2, 0, wx.ALIGN_CENTER, 0)
        sizer_35_copy.Add(self.cl_multi, 0, wx.ALIGN_CENTER, 0)
        sizer_35_copy.Add(self.label_19_copy, 0, wx.ALIGN_CENTER, 0)
        sizer_15.Add(sizer_35_copy, 1, wx.EXPAND, 0)
        sizer_35_copy_1.Add(self.label_8_copy_4, 0, wx.ALIGN_CENTER, 0)
        sizer_35_copy_1.Add(self.osc_wid_multi, 0, wx.ALIGN_CENTER, 0)
        sizer_35_copy_1.Add(self.label_19_copy_1, 0, wx.ALIGN_CENTER, 0)
        sizer_15.Add(sizer_35_copy_1, 1, wx.EXPAND, 0)
        sizer_35_copy_2.Add(self.label_8_copy_5, 0, wx.ALIGN_CENTER, 0)
        sizer_35_copy_2.Add(self.total_osc_multi, 0, wx.ALIGN_CENTER, 0)
        sizer_35_copy_2.Add(self.label_19_copy_2, 0, wx.ALIGN_CENTER, 0)
        sizer_15.Add(sizer_35_copy_2, 1, wx.EXPAND, 0)
        sizer_35_copy_2_copy_copy_1.Add(self.label_8_copy_5_copy_copy_1, 0, wx.ALIGN_CENTER, 0)
        sizer_35_copy_2_copy_copy_1.Add(self.exptime_for_each, 0, wx.ALIGN_CENTER, 0)
        sizer_35_copy_2_copy_copy_1.Add(self.label_19_copy_3_copy_1, 0, wx.ALIGN_CENTER, 0)
        sizer_15.Add(sizer_35_copy_2_copy_copy_1, 1, wx.EXPAND, 0)
        sizer_15.Add(self.label_8_copy_5_copy_copy_1_copy, 0, wx.ALIGN_CENTER, 0)
        sizer_35_copy_2_copy_copy_1_copy_copy.Add((20, 30), 0, 0, 0)
        sizer_35_copy_2_copy_copy_1_copy_copy.Add(self.dose_box, 0, wx.ALIGN_CENTER, 0)
        sizer_35_copy_2_copy_copy_1_copy_copy.Add(self.label_19_copy_3_copy_1_copy_copy, 0, wx.ALIGN_CENTER, 0)
        sizer_15.Add(sizer_35_copy_2_copy_copy_1_copy_copy, 1, wx.EXPAND, 0)
        sizer_15.Add(sizer_41, 1, 0, 0)
        sizer_35_copy_2_copy_copy.Add((20, 30), 0, 0, 0)
        sizer_15.Add(sizer_35_copy_2_copy_copy, 1, wx.EXPAND, 0)
        sizer_37.Add(sizer_15, 0, 0, 0)
        sizer_39.Add(self.label_20, 0, wx.ALIGN_CENTER, 0)
        sizer_39.Add(self.wl_box_multi, 0, wx.ALIGN_CENTER, 0)
        sizer_39.Add(self.label_21, 0, wx.ALIGN_CENTER, 0)
        sizer_38.Add(sizer_39, 1, wx.EXPAND, 0)
        sizer_39_copy.Add(self.label_20_copy, 0, wx.ALIGN_CENTER, 0)
        sizer_39_copy.Add(self.ncry_box_multi, 0, wx.ALIGN_CENTER, 0)
        sizer_39_copy.Add(self.label_21_copy, 0, wx.ALIGN_CENTER, 0)
        sizer_38.Add(sizer_39_copy, 1, wx.EXPAND, 0)
        sizer_39_copy_1.Add(self.label_20_copy_1, 0, wx.ALIGN_CENTER, 0)
        sizer_39_copy_1.Add(self.edge_res_multi, 0, wx.ALIGN_CENTER, 0)
        sizer_39_copy_1.Add(self.label_21_copy_1, 0, wx.ALIGN_CENTER, 0)
        sizer_38.Add(sizer_39_copy_1, 1, wx.EXPAND, 0)
        sizer_39_copy_3.Add(self.label_20_copy_3, 0, wx.ALIGN_CENTER, 0)
        sizer_39_copy_3.Add(self.startphi_multi, 0, wx.ALIGN_CENTER, 0)
        sizer_39_copy_3.Add(self.label_20_copy_3_copy, 0, wx.ALIGN_CENTER, 0)
        sizer_39_copy_3.Add(self.end_phi_multi, 0, wx.ALIGN_CENTER, 0)
        sizer_39_copy_3.Add(self.label_21_copy_3_copy, 0, wx.ALIGN_CENTER, 0)
        sizer_38.Add(sizer_39_copy_3, 1, wx.EXPAND, 0)
        sizer_39_copy_1_copy.Add(self.label_20_copy_1_copy, 0, wx.ALIGN_CENTER, 0)
        sizer_39_copy_1_copy.Add(self.totalExpMultiBox, 0, wx.ALIGN_CENTER, 0)
        sizer_39_copy_1_copy.Add(self.label_21_copy_1_copy, 0, wx.ALIGN_CENTER, 0)
        sizer_38.Add(sizer_39_copy_1_copy, 1, wx.EXPAND, 0)
        sizer_42.Add(self.label_20_copy_1_copy_copy_1, 0, wx.ALIGN_CENTER, 0)
        sizer_42.Add(self.totalExpMultiBox_copy, 0, wx.ALIGN_CENTER, 0)
        sizer_42.Add(self.label_21_copy_1_copy_copy_1, 0, wx.ALIGN_CENTER, 0)
        sizer_38.Add(sizer_42, 1, 0, 0)
        sizer_37.Add(sizer_38, 0, wx.EXPAND, 0)
        sizer_33.Add(sizer_37, 1, wx.EXPAND, 0)
        sizer_39_copy_2.Add(self.label_20_copy_2, 0, wx.ALIGN_CENTER, 0)
        sizer_39_copy_2.Add(self.att_thick_multi, 0, wx.ALIGN_CENTER, 0)
        sizer_39_copy_2.Add(self.label_21_copy_2, 0, wx.ALIGN_CENTER, 0)
        sizer_38_copy.Add(sizer_39_copy_2, 1, wx.EXPAND, 0)
        sizer_39_copy_1_copy_copy.Add(self.label_20_copy_1_copy_copy, 0, wx.ALIGN_CENTER, 0)
        sizer_39_copy_1_copy_copy.Add(self.phsPerDegBoxMulti, 0, wx.ALIGN_CENTER, 0)
        sizer_39_copy_1_copy_copy.Add(self.label_21_copy_1_copy_copy, 0, wx.ALIGN_CENTER, 0)
        sizer_38_copy.Add(sizer_39_copy_1_copy_copy, 1, wx.EXPAND, 0)
        sizer_43.Add(self.label_20_copy_1_copy_copy_copy, 0, wx.ALIGN_CENTER, 0)
        sizer_43.Add(self.FFexptimeBox, 0, wx.ALIGN_CENTER, 0)
        sizer_43.Add(self.label_21_copy_1_copy_copy_copy, 0, wx.ALIGN_CENTER, 0)
        sizer_38_copy.Add(sizer_43, 1, 0, 0)
        sizer_33.Add(sizer_38_copy, 0, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_17.Add(sizer_33, 0, wx.EXPAND, 0)
        self.notebook_1_pane_5.SetSizer(sizer_17)
        self.notebook_1.AddPage(self.notebook_1_pane_1, "Centering")
        self.notebook_1.AddPage(self.panel_1, "RD simulator")
        self.notebook_1.AddPage(self.notebook_1_pane_3, "Tuning")
        self.notebook_1.AddPage(self.notebook_1_pane_4, "Schedule")
        self.notebook_1.AddPage(self.notebook_1_pane_5, "MultiCrystal")
        sizer_6.Add(self.notebook_1, 1, wx.EXPAND, 0)
        sizer_5.Add(sizer_6, 1, wx.EXPAND, 0)
        sizer_3.Add(self.appendButton, 0, wx.ALL, 10)
        sizer_3.Add(self.deleteButton, 0, wx.ALL, 10)
        sizer_3.Add(self.clearAllButton, 0, wx.ALL, 10)
        sizer_3.Add(self.button_6_copy, 0, wx.ALL, 10)
        sizer_6_copy.Add(sizer_3, 0, wx.ALL | wx.EXPAND, 10)
        sizer_8.Add(self.label_1_copy, 0, 0, 0)
        sizer_8.Add(self.inputComment, 0, 0, 0)
        sizer_8.Add(sizer_29, 1, wx.EXPAND, 0)
        sizer_7.Add(sizer_8, 0, wx.EXPAND, 0)
        sizer_7.Add(self.list_ctrl_1, 3, wx.ALL | wx.EXPAND, 10)
        sizer_13.Add((200, 20), 0, 0, 0)
        sizer_13.Add(self.button_6, 0, 0, 0)
        sizer_32.Add((20, 20), 0, 0, 0)
        sizer_32.Add(self.label_13, 0, 0, 0)
        sizer_32.Add(self.withPHIcheck, 0, 0, 0)
        sizer_13.Add(sizer_32, 1, wx.EXPAND, 0)
        sizer_7.Add(sizer_13, 0, wx.EXPAND, 0)
        sizer_6_copy.Add(sizer_7, 1, wx.EXPAND, 0)
        sizer_5.Add(sizer_6_copy, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_5)
        sizer_5.Fit(self)
        self.Layout()
        # end wxGlade

    def upButton(self, event): # wxGlade: MyFrame2.<event_handler>
        dist=float(self.distBox.GetValue())
        self.gonio.moveUpDown(dist)
        self.transUpdate()

    def leftButton(self, event): # wxGlade: MyFrame2.<event_handler>
        dist= -float(self.distBox.GetValue())
        self.gonio.moveTrans(dist)
        self.transUpdate()

    def rightButton(self, event): # wxGlade: MyFrame2.<event_handler>
        dist= float(self.distBox.GetValue())
        self.gonio.moveTrans(dist)
        self.transUpdate()

    def downButton(self, event): # wxGlade: MyFrame2.<event_handler>
        dist=-float(self.distBox.GetValue())
        self.gonio.moveUpDown(dist)
        self.transUpdate()

    def pintPlus(self, event): # wxGlade: MyFrame2.<event_handler>
        dist=float(self.distBox.GetValue())
        self.gonio.movePint(dist)
        self.transUpdate()

    def pintMinus(self, event): # wxGlade: MyFrame2.<event_handler>
        dist=-float(self.distBox.GetValue())
        self.gonio.movePint(dist)
        self.transUpdate()

    def reversePhiPlus(self, event): # wxGlade: MyFrame2.<event_handler>
        rot_ang=180.0
        self.gonio.rotatePhiRelative(rot_ang)
        self.transUpdate()

    def phiPlus(self, event): # wxGlade: MyFrame2.<event_handler>
        rot_ang=float(self.phiBox.GetValue())
        self.gonio.rotatePhiRelative(rot_ang)
        self.transUpdate()

    def phiMinus(self, event): # wxGlade: MyFrame2.<event_handler>
        rot_ang=-float(self.phiBox.GetValue())
        self.gonio.rotatePhiRelative(rot_ang)
        self.transUpdate()

    def reversePhiMinus(self, event): # wxGlade: MyFrame2.<event_handler>
        rot_ang=-180.0
        self.gonio.rotatePhiRelative(rot_ang)
        self.transUpdate()

    def updateGonio(self, event): # wxGlade: MyFrame2.<event_handler>
	self.transUpdate()

    def prepCentering(self, event): # wxGlade: MyFrame2.<event_handler>
	self.light.goOn()
	self.colli.goOff()
#	kawano@100726
	#self.cryo.goOn()

    def evacuate(self, event): # wxGlade: MyFrame2.<event_handler>
	self.colli.goOff()
	self.bs.goOff()
	#self.cryo.safetyEvacuate()

    def inputStepV(self, event): # wxGlade: MyFrame2.<event_handler>
        print "Event handler `inputStepV' not implemented!"
        event.Skip()

    def seleOrigin(self, event): # wxGlade: MyFrame2.<event_handler>
        if self.selected!=-1:
                xstr=self.list_ctrl_1.GetItem(self.selected,1).GetText()
                ystr=self.list_ctrl_1.GetItem(self.selected,2).GetText()
                zstr=self.list_ctrl_1.GetItem(self.selected,3).GetText()

                xmm=float(xstr)
                ymm=float(ystr)
                zmm=float(zstr)

		str="%8.4f %8.4f %8.4f"%(xmm,ymm,zmm)
		self.dispOriVec.SetValue(str)

		self.gv.setOrigVec(xmm,ymm,zmm)

    def seleVert(self, event): # wxGlade: MyFrame2.<event_handler>
        if self.selected!=-1:
                xstr=self.list_ctrl_1.GetItem(self.selected,0).GetText()
                ystr=self.list_ctrl_1.GetItem(self.selected,1).GetText()
                zstr=self.list_ctrl_1.GetItem(self.selected,2).GetText()

                xmm=float(xstr)
                ymm=float(ystr)
                zmm=float(zstr)

		str="%8.4f %8.4f %8.4f"%(xmm,ymm,zmm)
		self.dispVertVec.SetValue(str)
		self.gv.setVertVec(xmm,ymm,zmm)

    def seleHori(self, event): # wxGlade: MyFrame2.<event_handler>
        if self.selected!=-1:
                xstr=self.list_ctrl_1.GetItem(self.selected,0).GetText()
                ystr=self.list_ctrl_1.GetItem(self.selected,1).GetText()
                zstr=self.list_ctrl_1.GetItem(self.selected,2).GetText()

                xmm=float(xstr)
                ymm=float(ystr)
                zmm=float(zstr)

		str="%8.4f %8.4f %8.4f"%(xmm,ymm,zmm)
		self.dispHoriVec.SetValue(str)
		self.gv.setHoriVec(xmm,ymm,zmm)

    def inputStepH(self, event): # wxGlade: MyFrame2.<event_handler>
        print "Event handler `inputStepH' not implemented!"
        event.Skip()

    def applyButton(self, event): # wxGlade: MyFrame2.<event_handler>
	# Attenuator 
        self.att_idx=int(self.inputAttIdx.GetValue())
	# step number
	self.vstep=int(self.stepVertVecBox.GetValue())
	self.hstep=int(self.stepHoriVecBox.GetValue())

	# scan condition
	self.scheFile.setDir(self.inputDire.GetValue())
	#self.scheFile.setDir("/isilon/users/target/target/")
	self.f=File(self.inputDire.GetValue())
	self.scheFile.setDataName(self.inputDname.GetValue())
	self.start_serial=int(self.inputSerial.GetValue())
	self.scheFile.setExpTime(float(self.inputExpTime.GetValue()))
	self.scheFile.setAttIdx(self.att_idx)
	self.scheFile.setWL(1)
	self.schFile.setBeamsizeIdx()

	# rotation condition
	self.rot_start=float(self.inputStartPhi.GetValue())
	self.rot_end=float(self.inputEndPhi.GetValue())
	self.rot_step=float(self.inputStepPhi.GetValue())
	self.phi_range=self.rot_end-self.rot_start
	self.scheFile.setCameraLength(float(self.inputDist.GetValue()))
	self.nframe=int((self.rot_end-self.rot_start)/self.rot_step)
	str0="%d"%self.nframe
	self.dispFrameNo.SetValue(str0)

	# Advanced mode information
	self.each_nframe=int(float(self.nframe)/float(self.vstep))
	self.hstep_mm=self.gv.getHoriLen()/float(self.each_nframe)
	str0="%d"%(self.each_nframe)
	self.stepHoriVecBox.SetValue(str0)

	self.start_points,self.end_points,self.vstep_mm,junk=self.gv.makePlane(self.vstep,self.hstep)
	self.scheFile.setAdvanced(self.each_nframe,self.hstep_mm)
	print self.start_points
	print self.end_points

	# display step
	str1="%8.4f"%(self.vstep_mm*1000.0)
	str2="%8.4f"%(self.hstep_mm*1000.0)

	self.dispVertStepUm.SetValue(str1)
	self.dispHoriStepUm.SetValue(str2)

	# number of points to be exposed
	self.phi_bunch=self.phi_range/self.vstep

    def genSchedule(self, event): # wxGlade: MyFrame2.<event_handler>
	prefix=self.inputDname.GetValue()
	for i in range(0,self.vstep):
		offset=self.nframe/self.vstep
		self.scheFile.setOffset(i*offset+self.start_serial-1)
		phi_start=self.rot_start+i*self.phi_bunch
		phi_end=phi_start+self.phi_bunch
		self.scheFile.setScanCondition(phi_start,phi_end,self.rot_step)
		self.scheFile.setAdvancedVector(self.start_points[i],self.end_points[i])
		filename="%s/%s_%02d.sch"%(self.f.getAbsolutePath(),prefix,i)
		self.scheFile.make(filename)

    def onClose(self, event):
        self.s.close() # server
        self.shika_intr.stop()
        self.Destroy()

    def OnAppendShika(self,event):
        phi="%8.1f"%event.gonio_phi
        gx, gy, gz = map(lambda x:"%8.4f"%x, event.gonio_xyz)

        code=(phi,gx,gy,gz)
        self.gonio_list.insert(0,code)

	# For a list 
        # get comment
        comment=event.comment

        self.list_ctrl_1.InsertStringItem(0,comment)
        self.list_ctrl_1.SetStringItem(0,1,gx)
        self.list_ctrl_1.SetStringItem(0,2,gy)
        self.list_ctrl_1.SetStringItem(0,3,gz)
        self.list_ctrl_1.SetStringItem(0,4,phi)
        #self.list_ctrl_1.SetStringItem(0,4,comment)

    def OnAppend(self, event): # wxGlade: MyFrame2.<event_handler>
        phi="%8.1f"%self.gonio.getPhi()
        gx="%8.4f"%self.gonio.getXmm()
        gy="%8.4f"%self.gonio.getYmm()
        gz="%8.4f"%self.gonio.getZmm()

        code=(phi,gx,gy,gz)
        self.gonio_list.insert(0,code)

        # get comment
        comment=self.inputComment.GetValue()

        self.list_ctrl_1.InsertStringItem(0,comment)
        self.list_ctrl_1.SetStringItem(0,1,gx)
        self.list_ctrl_1.SetStringItem(0,2,gy)
        self.list_ctrl_1.SetStringItem(0,3,gz)
        self.list_ctrl_1.SetStringItem(0,4,phi)
        #self.list_ctrl_1.SetStringItem(0,4,comment)

    def Ondelete(self, event): # wxGlade: MyFrame2.<event_handler>
        if self.selected!=-1:
                self.list_ctrl_1.DeleteItem(self.selected)
                del self.gonio_list[self.selected]
                print self.gonio_list
                self.selected=-1

        if len(self.gonio_list)==0:
                self.selected=-1

    def OndeleteMulti(self, event): # wxGlade: MyFrame2.<event_handler>
	
	print "SELE:",self.selected_multi
        if self.selected_multi!=-1:
                self.list_multi.DeleteItem(self.selected_multi)
                self.selected_multi=-1

        if len(self.gonio_list)==0:
                self.selected_multi=-1

    def OnClearAll(self, event): # wxGlade: MyFrame2.<event_handler>
        self.list_ctrl_1.DeleteAllItems()
        self.gonio_list=[]
        self.selected=-1

    def OnClearAllMulti(self, event): # wxGlade: MyFrame2.<event_handler>
        self.list_multi.DeleteAllItems()

    def OnListInsertItem(self, event): # wxGlade: MyFrame2.<event_handler>
        print "Event handler `OnListInsertItem' not implemented!"
        event.Skip()

    def OnListSelected(self, event): # wxGlade: MyFrame2.<event_handler>
        self.selected=event.m_itemIndex

    def OnListSelectedMulti(self, event): # wxGlade: MyFrame2.<event_handler>
        self.selected_multi=event.m_itemIndex

    def OnDobleClick(self, event): # wxGlade: MyFrame2.<event_handler>
        print "Event handler `OnDobleClick' not implemented!"
        event.Skip()

    def OnListColClick(self, event): # wxGlade: MyFrame2.<event_handler>
        print "Event handler `OnListColClick' not implemented!"
        event.Skip()

    def moveToSelected(self, event): # wxGlade: MyFrame2.<event_handler>
        if self.selected!=-1:
		# check if "with PHI"
        	self.isWithPHI=self.withPHIcheck.GetValue()

                xstr=self.list_ctrl_1.GetItem(self.selected,1).GetText()
                ystr=self.list_ctrl_1.GetItem(self.selected,2).GetText()
                zstr=self.list_ctrl_1.GetItem(self.selected,3).GetText()
		if self.isWithPHI:
                	pstr=self.list_ctrl_1.GetItem(self.selected,4).GetText()
			pvalue=float(pstr)
			self.gonio.rotatePhi(pvalue)
        	#self.isWithCryoZ=self.checkbox_2.GetValue()

                xmm=float(xstr)
                ymm=float(ystr)
                zmm=float(zstr)

                self.gonio.moveXYZmm(xmm,ymm,zmm)

    def transUpdate(self):
        phi="%8.2f"%self.gonio.getPhi()
        gx="%8.4f"%self.gonio.getXmm()
        gy="%8.4f"%self.gonio.getYmm()
        gz="%8.4f"%self.gonio.getZmm()
        gzz="%8.4f"%self.gonio.getZZmm()

        self.currPhi.SetValue(phi)
        self.currGonioX.SetValue(gx)
        self.currGonioY.SetValue(gy)
        self.currGonioZ.SetValue(gz)
        self.currGonioZZ.SetValue(gzz)

    def tenoseDo(self, event): # wxGlade: MyFrame2.<event_handler>
	self.colli.go(-70000)
	self.bs.go(-70000)

	# status of check box
        self.isWithCryoZ=self.checkbox_2.GetValue()
        self.isWithLight=self.checkbox_2_copy.GetValue()

	# Check button for "with Cryo Z"
	if self.isWithCryoZ:
		self.cryo.goOff()

        if self.isWithLight:
		self.light.goOff()

    def pushSetPhi(self, event): # wxGlade: MyFrame2.<event_handler>
	phistart=self.gonio.getPhi()
	phistep=float(self.oscStepBox.GetValue())
	phiend=phistart+phistep

	startstr="%8.2f"%phistart
	endstr="%8.2f"%phiend

	self.oscStartBox.SetValue(startstr)
	self.oscEndBox.SetValue(endstr)

    def setAdvTrue(self, event): # wxGlade: MyFrame2.<event_handler>
        state=self.checkbox_1.GetValue()
	print state

	if state==True:
        	self.vec1XBox.Enable(True)
        	self.vec1YBox.Enable(True)
        	self.vec1ZBox.Enable(True)

        	self.vec2XBox.Enable(True)
        	self.vec2YBox.Enable(True)
        	self.vec2ZBox.Enable(True)
	else:
        	self.vec1XBox.Enable(False)
        	self.vec1YBox.Enable(False)
        	self.vec1ZBox.Enable(False)

        	self.vec2XBox.Enable(False)
        	self.vec2YBox.Enable(False)
        	self.vec2ZBox.Enable(False)

    def commonSimulation(self):
        dist=float(self.camelenBox.GetValue())
        wavelength=float(self.wavelenBox.GetValue())

	detectordim=233.2 #[mm in shorter dimension]
        twotheta=math.atan((detectordim/2.0)/dist)
        theta=twotheta/2.0
        maxd=wavelength/2.0/math.sin(theta)
        maxdstr="%8.2f"%maxd
        self.edgeResolSimuBox.SetValue(maxdstr)
	att_fac=self.attfac.calcAttFac(wavelength,self.att_thickness)*100.0
	att_facstr="%6.4f"%att_fac
	self.attSimuBox.SetValue(att_facstr)
	# Beamsize index get
	bs_index=self.beamsizePullDown.GetCurrentSelection()
	flux=self.flux_list[bs_index]
	flux_str="%5.2e"%self.flux_list[bs_index]
	self.FluxBox.SetValue(flux_str)

	# Exposure condition -> Flux
	exptime=float(self.exptimeBox.GetValue())
	phs_per_frame=flux*att_fac/100.0*exptime
	flstr="%5.2e"%phs_per_frame
	self.photonsPerFrameBox.SetValue(flstr)

        # Rotation speed
	start_phi=float(self.oscStartBox.GetValue())
	end_phi=float(self.oscEndBox.GetValue())
        osc_step=float(self.oscStepBox.GetValue())
	phi_total=end_phi-start_phi
	nframes=int(phi_total/osc_step)
        rot_speed=osc_step/exptime
        rotspstr="%8.2f"%rot_speed
        self.rotSpeedBox.SetValue(rotspstr)
	flux_per_angle=phs_per_frame/osc_step
	fpa_str="%5.2e"%flux_per_angle
	self.phsPerRotBox.SetValue(fpa_str)
	self.numFrameBox.SetValue("%04d"%nframes)

        total_exp=exptime*nframes
        te_str="%5.1f"%total_exp
        self.totalExpBox.SetValue(te_str)

	# Optimism count rate
	# EIGER 233.2 x 245.2 mm2
	optimism_count_rate=flux*att_fac/233.2/245.2
	ocr_str="%5.1e"%optimism_count_rate
	self.countRateBox.SetValue(ocr_str)
	if optimism_count_rate > 5E8:
	        self.countRateBox.SetBackgroundColour(wx.Colour(150,0,0))
	else:
        	self.countRateBox.SetBackgroundColour(wx.Colour(186, 186, 186))
	return nframes,phi_total

    def pushCheck(self, event): # wxGlade: MyFrame2.<event_handler>
	# common simulation 
    	self.commonSimulation()
	
	# Helical data collection flag is True
        state=self.checkbox_1.GetValue()
	if state:
		phi_total,nframes=self.checkAdvanced()
	else:
		self.advancedLength.SetValue("-")
		self.transSpeedBox.SetValue("-")

    def selectAttList(self, event): # wxGlade: MyFrame2.<event_handler>
        self.att_index=self.attPullDown.GetCurrentSelection()
        strstr=self.attPullDown.GetValue()
        if strstr!="none":
                self.att_thickness=float(self.attPullDown.GetValue())
        else :
                self.att_thickness=0.0

    def pushSetVec1(self, event): # wxGlade: MyFrame2.<event_handler>
        if self.selected!=-1:
                xstr=self.list_ctrl_1.GetItem(self.selected,1).GetText()
                ystr=self.list_ctrl_1.GetItem(self.selected,2).GetText()
                zstr=self.list_ctrl_1.GetItem(self.selected,3).GetText()

                xmm=float(xstr)
                ymm=float(ystr)
                zmm=float(zstr)

                xstr="%8.4f"%xmm
                ystr="%8.4f"%ymm
                zstr="%8.4f"%zmm

                self.vec1XBox.SetValue(xstr)
                self.vec1YBox.SetValue(ystr)
                self.vec1ZBox.SetValue(zstr)

    def pushSetVec2(self, event): # wxGlade: MyFrame2.<event_handler>
        if self.selected!=-1:
                xstr=self.list_ctrl_1.GetItem(self.selected,1).GetText()
                ystr=self.list_ctrl_1.GetItem(self.selected,2).GetText()
                zstr=self.list_ctrl_1.GetItem(self.selected,3).GetText()

                xmm=float(xstr)
                ymm=float(ystr)
                zmm=float(zstr)

                xstr="%8.4f"%xmm
                ystr="%8.4f"%ymm
                zstr="%8.4f"%zmm

                self.vec2XBox.SetValue(xstr)
                self.vec2YBox.SetValue(ystr)
                self.vec2ZBox.SetValue(zstr)

    def getScheduleParams(self):
        datadir=self.direBox.GetValue()
        dataname=self.prefixBox.GetValue()
        offset=int(self.serialBox.GetValue())
        exptime=float(self.exptimeBox.GetValue())
        wavelength=float(self.wavelenBox.GetValue())
        startphi=float(self.oscStartBox.GetValue())
        endphi=float(self.oscEndBox.GetValue())
        stepphi=float(self.oscStepBox.GetValue())
        cl=float(self.camelenBox.GetValue())
        attidx=self.attPullDown.GetCurrentSelection()
	bs_index=self.beamsizePullDown.GetCurrentSelection()

        return datadir,dataname,offset,exptime,wavelength,startphi,endphi,stepphi,cl,attidx,bs_index

    def pushOutput(self, event): # wxGlade: MyFrame2.<event_handler>
        try:
                # Constructor
                bsssch=ScheduleBSS_HS()

                # Schedule file parameters
                datadir,dataname,offset,exptime,wavelength,startphi,endphi, \
			stepphi,cl,attidx,bs_index=self.getScheduleParams()

                # Setting Schedule
                # directory
                bsssch.setDir(datadir)
                # dataname
                bsssch.setDataName(dataname)
                # Serial offset
                bsssch.setOffset(offset)
                # Exp time
                bsssch.setExpTime(exptime)
                # wavelength
                bsssch.setWL(wavelength)
                # distance
                bsssch.setCameraLength(cl)
                # attenuator
                bsssch.setAttIdx(attidx)
                # attenuator
                bsssch.setBeamsizeIdx(bs_index+1)
                # MX225HE Readout mode (Fast/Slow)
                isSlow=self.checkbox_3.GetValue()
                if isSlow==True:
                        bsssch.setSlowOn()

		# is it Helical mode?
                state=self.checkbox_1.GetValue()
                if state:
                        #
                        # Advanced mode
                        # Check advanced condition
                        phi_total,nframes=self.checkAdvanced()

                        # crystal length [um->mm]     
			crylen=float(self.advancedLength.GetValue())/1000.0
                        astep_mm=crylen/float(nframes)
                        # frames/point
                        ainterval=1
                        bsssch.setAdvanced(int(nframes),astep_mm,ainterval)
                        # startvec
                        sx=float(self.vec1XBox.GetValue())
                        sy=float(self.vec1YBox.GetValue())
                        sz=float(self.vec1ZBox.GetValue())
                        startxyz=[sx,sy,sz]
                        # end vec
                        ex=float(self.vec2XBox.GetValue())
                        ey=float(self.vec2YBox.GetValue())
                        ez=float(self.vec2ZBox.GetValue())
                        endxyz=[ex,ey,ez]
                        bsssch.setAdvancedVector(startxyz,endxyz)
                        # Schedule file parameters
                        datadir,dataname,offset,exptime,wavelength,startphi,endphi,stepphi,cl,attidx,bs_idx=self.getScheduleParams()
                        # Scan condition
                        bsssch.setScanCondition(startphi,endphi,stepphi)
                else:
                        # Scan condition
                        bsssch.setScanCondition(startphi,endphi,stepphi)

                home_dir=os.environ['HOME']
                ofile="%s/yaruzo.sch"%home_dir
                bsssch.make(ofile)
        except:
                wx.MessageDialog(None, traceback.format_exc(),
                                 "Error", style=wx.OK).ShowModal()

	# LOG FILE
	nowt=datetime.datetime.now()
	beamh_um,beamv_um=self.bsconf.getBeamsizeAtIndex(bs_index)
        self.logfile.write("%s: Helical Directory= %s\n"%(nowt,datadir))
        self.logfile.write("%s: crylen=%8.5f startphi=%5.1f endphi=%5.1f stepphi=%5.1f\n"%\
		(nowt,crylen,startphi,endphi,stepphi))
        self.logfile.write("%s: beamh=%5.1f um beamv=%5.1f um\n"%(nowt,beamh_um,beamv_um))
	att_thickness=float(self.attPullDown.GetValue())
        self.logfile.write("%s: exptime=%5.2f att=%5.1f um\n"%(nowt,exptime,att_thickness))
        self.logfile.flush()

    	# For helical data collection
    def checkAdvanced(self):
	self.logfile.write("%s: KUMA.checkAdvanced is called"%datetime.datetime.now())
	# startvec
	sx=float(self.vec1XBox.GetValue())
	sy=float(self.vec1YBox.GetValue())
	sz=float(self.vec1ZBox.GetValue())
	startxyz=[sx,sy,sz]
	# end vec
	ex=float(self.vec2XBox.GetValue())
	ey=float(self.vec2YBox.GetValue())
	ez=float(self.vec2ZBox.GetValue())
	endxyz=[ex,ey,ez]
	# start(x,y,z), end(x,y,z)
        scanvec=self.gv.makeLineVec(startxyz,endxyz)

	# Newly devloped metric for radiation damage on 
	# Helical data collection with shutter-less data collection
        wavelength=float(self.wavelenBox.GetValue())

        # frame number
        osc_start=float(self.oscStartBox.GetValue())
        osc_step=float(self.oscStepBox.GetValue())
        osc_end=float(self.oscEndBox.GetValue())

	# Attenuation factor for safety data collection
	# NOTE: This is only for wavelength of 1.0A 
	bs_index=self.beamsizePullDown.GetCurrentSelection()
	full_flux=self.flux_list[bs_index]
	exptime=float(self.exptimeBox.GetValue())
	phi_total=osc_end-osc_start
	bs_index=self.beamsizePullDown.GetCurrentSelection()
	beamh_um,beamv_um=self.bsconf.getBeamsizeAtIndex(bs_index)

        # Crystal length along with a spindle axis
        crysize_um=math.fabs(scanvec[1]*1000.0)
	print crysize_um,beamh_um
        if crysize_um <= beamh_um:
                crysize_um=beamh_um

        diststr="%8.4f"%crysize_um
        self.advancedLength.SetValue(diststr)

	nframes=phi_total/osc_step
	total_exp=exptime*nframes
	te_str="%5.1f"%total_exp
	self.totalExpBox.SetValue(te_str)

	transpeed=crysize_um/total_exp
	trspd_str="%6.2f"%transpeed
	self.transSpeedBox.SetValue(trspd_str)

	self.logfile.write("Selected beam size = %8.2f %8.2f\n"%(beamh_um,beamv_um))
	exp_volume=crysize_um*beamv_um
	total_photons=nframes*full_flux*exptime
	self.logfile.write("Exposure volume=%6.3f"%exp_volume)
	self.logfile.write("Total photons=%12.2e \n"%total_photons)

	self.logfile.write("FAC=%6.3f\n"%(total_photons/exp_volume))

	attfac=1.0E10*(crysize_um*beamv_um*osc_step)/(full_flux*exptime*phi_total)
        real_thick=self.attfac.calcThickness(wavelength,attfac)
        best_thick=self.attfac.getBestAtt(wavelength,attfac)
	print "Attfactor=",attfac,"Al=",best_thick

	transstr="%5.2f"%(attfac*100.0)+" %"
	thickstr="%4.0f"%real_thick
	self.dispARDbox.SetValue(transstr)
	self.dispSuitAttBox.SetValue(thickstr)

    	# For helical data collection
	return phi_total,nframes

    def phiP90(self, event): # wxGlade: MyFrame2.<event_handler>
        rot_ang=90
        self.gonio.rotatePhiRelative(rot_ang)
        self.transUpdate()

    def phiM90(self, event): # wxGlade: MyFrame2.<event_handler>
        rot_ang=-90
        self.gonio.rotatePhiRelative(rot_ang)
        self.transUpdate()

    def pushTuneButton(self, event): # wxGlade: MyFrame2.<event_handler>
	today=datetime.datetime.today()
	#self.tuneLogTextBox.SetValue("%s: Beam tuning started.\n"%today)
        wl=float(self.wavelengthBox.GetValue())
	kt=KUMAtune()
	# Change energy
	kt.beforeTune()
	kt.changeWL(wl)
	kt.autoTune()
	today=datetime.datetime.today()
	self.tuneLogTextBox.SetValue("%s: Beam tuning succeeded.\n"%today)

    def pushOrigVec(self, event): # wxGlade: MyFrame2.<event_handler>
        if self.selected!=-1:
                xstr=self.list_ctrl_1.GetItem(self.selected,1).GetText()
                ystr=self.list_ctrl_1.GetItem(self.selected,2).GetText()
                zstr=self.list_ctrl_1.GetItem(self.selected,3).GetText()

                xmm=float(xstr)
                ymm=float(ystr)
                zmm=float(zstr)

		xmmstr="%8.4f"%xmm
		ymmstr="%8.4f"%ymm
		zmmstr="%8.4f"%zmm
		
		self.OrigXbox.SetValue(xmmstr)
		self.OrigYbox.SetValue(ymmstr)
		self.OrigZbox.SetValue(zmmstr)

    def pushSlowVec(self, event): # wxGlade: MyFrame2.<event_handler>
        if self.selected!=-1:
                xstr=self.list_ctrl_1.GetItem(self.selected,1).GetText()
                ystr=self.list_ctrl_1.GetItem(self.selected,2).GetText()
                zstr=self.list_ctrl_1.GetItem(self.selected,3).GetText()

                xmm=float(xstr)
                ymm=float(ystr)
                zmm=float(zstr)

		xmmstr="%8.4f"%xmm
		ymmstr="%8.4f"%ymm
		zmmstr="%8.4f"%zmm
		
		self.SlowXbox.SetValue(xmmstr)
		self.SlowYbox.SetValue(ymmstr)
		self.SlowZbox.SetValue(zmmstr)

    def pushFastVec(self, event): # wxGlade: MyFrame2.<event_handler>
        if self.selected!=-1:
                xstr=self.list_ctrl_1.GetItem(self.selected,1).GetText()
                ystr=self.list_ctrl_1.GetItem(self.selected,2).GetText()
                zstr=self.list_ctrl_1.GetItem(self.selected,3).GetText()

                xmm=float(xstr)
                ymm=float(ystr)
                zmm=float(zstr)

		xmmstr="%8.4f"%xmm
		ymmstr="%8.4f"%ymm
		zmmstr="%8.4f"%zmm
		
		self.FastXbox.SetValue(xmmstr)
		self.FastYbox.SetValue(ymmstr)
		self.FastZbox.SetValue(zmmstr)

    def dispCondition(self):
		dist=float(self.camelenBox.GetValue())
		wavelength=float(self.wavelenBox.GetValue())
		detectordim=233.2 #[mm in shorter dimension]
		twotheta=math.atan((detectordim/2.0)/dist)
		theta=twotheta/2.0
		maxd=wavelength/2.0/math.sin(theta)
		maxdstr="%8.2f"%maxd
		self.edgeResolSimuBox.SetValue(maxdstr)
		att_fac=self.attfac.calcAttFac(wavelength,self.att_thickness)*100.0
		att_facstr="%6.2f"%att_fac
		self.attSimuBox.SetValue(att_facstr)

    def get2Dvectors(self):
		# original vector
		ox=float(self.OrigXbox.GetValue())
		oy=float(self.OrigYbox.GetValue())
		oz=float(self.OrigZbox.GetValue())
		ov=[ox,oy,oz]

		# slow vector
		sx=float(self.SlowXbox.GetValue())
		sy=float(self.SlowYbox.GetValue())
		sz=float(self.SlowZbox.GetValue())
		sv=[sx,sy,sz]

		# fast vector
		fx=float(self.FastXbox.GetValue())
		fy=float(self.FastYbox.GetValue())
		fz=float(self.FastZbox.GetValue())
		fv=[fx,fy,fz]

		print ov,sv,fv
		return ov,sv,fv

    def pushCheck2D(self, event): # wxGlade: MyFrame2.<event_handler>
		# Display experimental condition
		self.dispCondition()
		# Get vectors
		origv,slowv,fastv=self.get2Dvectors()
		# N points for Slow/Fast vectors
		self.ns=int(self.slowNpts.GetValue())
		self.nf=int(self.fastNpts.GetValue())
		self.nframe=self.ns*self.nf
		# generate scan vectors on 2D plane (GonioVector class)
		try:
			self.startlist,self.endlist,self.fastlen,self.slowlen=self.gv.yattane(origv,fastv,slowv,self.nf,self.ns)
			#print self.startlist
		except MyException,ttt:
			print "Vec length failed"
		
    def pushOutput2D(self, event): # wxGlade: MyFrame2.<event_handler>
		# push check2D
		self.pushCheck2D(event)
		# Constructor
		bsssch=ScheduleBSS_HS()
		# Schedule file parameters
		datadir,dataname,offset,exptime,wavelength,startphi,endphi,stepphi,cl,attidx,bs_idx=self.getScheduleParams()
		########
        	# Setting Schedule
		########
        	# directory
        	bsssch.setDir(datadir)
        	# dataname
        	bsssch.setDataName(dataname)
        	# Exp time
        	bsssch.setExpTime(exptime)
        	# wavelength
        	bsssch.setWL(wavelength)
        	# Scan condition
        	bsssch.setScanCondition(startphi,endphi,stepphi)
        	# distance
        	bsssch.setCameraLength(cl)
        	# attenuator
        	bsssch.setAttIdx(attidx)
        	# frames/point
		ainterval=int(self.advFramePerPoint2d.GetValue())

		# Step phi
		total_oscrange=stepphi*float(self.nframe)*float(ainterval)
		end_phi=startphi+total_oscrange
		end_phistr="%5.1f"%end_phi
		self.oscEndBox.SetValue(end_phistr)
		#print total_oscrange for each schedule file
		block_oscrange=float(self.nf)*stepphi*float(ainterval)

		# display advanced step
		slowstep_str="%8.3f"%(self.slowlen*1000.0)
		faststep_str="%8.3f"%(self.fastlen*1000.0)
		self.SlowStepBox.SetValue(slowstep_str)
		self.FastStepBox.SetValue(faststep_str)
		length=self.slowlen*1000

		for idx in range(0,len(self.startlist)):
			first_number=idx*self.nf
        		# Serial offset
        		bsssch.setOffset(first_number)
                	bsssch.setAdvanced(self.nf,self.fastlen,ainterval)
                	bsssch.setAdvancedVector(self.startlist[idx],self.endlist[idx])

        		# Scan condition
			each_start=startphi+idx*block_oscrange
			each_end=each_start+block_oscrange
        		bsssch.setScanCondition(each_start,each_end,stepphi)

			ofile="/isilon/users/target/target/2d_%03d.sch"%idx
			bsssch.make(ofile)

    def pushGoX2(self, event): # wxGlade: MyFrame2.<event_handler>
        tmpx=float(self.gonioXBox2.GetValue())
	self.gonio.moveXmm(tmpx)

    def pushGoY2(self, event): # wxGlade: MyFrame2.<event_handler>
        tmpy=float(self.gonioYBox2.GetValue())
	self.gonio.moveYmm(tmpy)

    def pushGoZ2(self, event): # wxGlade: MyFrame2.<event_handler>
        tmpz=float(self.gonioZBox2.GetValue())
	self.gonio.moveZmm(tmpz)

    def pushLightDown(self, event): # wxGlade: MyFrame2.<event_handler>
	isOffPosition=self.button_8.GetValue()

	if isOffPosition:
		self.light.goDown()
	else:
        	self.light.goOn()

    def pushWithCryoZ(self, event): # wxGlade: MyFrame2.<event_handler>
        self.isWithCryoZ=self.checkbox_2.GetValue()

    def pushGoXYZ(self, event): # wxGlade: MyFrame2.<event_handler>
        print "Event handler `pushGoXYZ' not implemented"
        event.Skip()

    def pushWithLight(self, event): # wxGlade: MyFrame2.<event_handler>
        self.isWithLight=self.checkbox_2_copy.GetValue()

    def saveGlistToFile(self, event): # wxGlade: MyFrame2.<event_handler>
	# Home directory
        home_dir=os.environ['HOME']
	nowtime="%s"%datetime.datetime.now()
	nowtime=nowtime.replace(" ","-").replace(":","")
	nowtime=nowtime[:nowtime.rfind(".")]
	print nowtime
        ofile="%s/gonio-%s.dat"%(home_dir,nowtime)
	print ofile
        #print self.list_ctrl_1.GetColumnCount()
        nlist=self.list_ctrl_1.GetItemCount()
	outf=open(ofile,"w")
	for idx in arange(0,nlist):
                comment=self.list_ctrl_1.GetItem(idx,0).GetText()
                xstr=self.list_ctrl_1.GetItem(idx,1).GetText()
                ystr=self.list_ctrl_1.GetItem(idx,2).GetText()
                zstr=self.list_ctrl_1.GetItem(idx,3).GetText()
                pstr=self.list_ctrl_1.GetItem(idx,4).GetText()

                xmm=float(xstr)
                ymm=float(ystr)
                zmm=float(zstr)
		pvalue=float(pstr)
		outf.write("%s %10.4f %10.4f %10.4f %10.1f\n"%(comment,xmm,ymm,zmm,pvalue))
	outf.close()

    def setLowNoiseTrue(self, event): # wxGlade: MyFrame2.<event_handler>
        print "Event handler `setLowNoiseTrue' not implemented"
        event.Skip()

    def pushResetConditions(self, event): # wxGlade: MyFrame2.<event_handler>
	self.dCellBox.SetValue("78 36 36 90 90 90")
	self.dNresBox.SetValue("129")
	self.dNchainsBox.SetValue("8")
	self.dHABox.SetValue("Fe 2 Cu 2")
	self.dIonBox.SetValue("Na 1500 Cl 1500")
	self.dCrySizeBox.SetValue("100x100x100")
	self.dBeamSizeBox.SetValue("1x10")
	self.dFluxBox.SetValue("4E11")
	self.dWLBox.SetValue("1.0")

    def extractBeamSize(self,bsizetxt):
	tmp=bsizetxt.replace("x"," ")
	tmp2=tmp.replace("X"," ")
	cols=tmp2.split()
	hori=float(cols[0])/1000.0
	vert=float(cols[1])/1000.0
	return hori,vert

    def extractCrySize(self,csize):
	tmp=csize.replace("x"," ")
	tmp2=tmp.replace("X"," ")
	tmp3=tmp2.split()
	h,v,d=float(tmp3[0])/1000.0,float(tmp3[1])/1000.0,float(tmp3[2])/1000.0
	return h,v,d

    def pushEstimateDose(self, event): # wxGlade: MyFrame2.<event_handler>
	# Raddose instance
	rd=Raddose()
	# Cell
	cell=self.dCellBox.GetValue()
	# Number of residues
	nres=int(self.dNresBox.GetValue())
	# Z (N molecules)
	nmon=int(self.dNchainsBox.GetValue())
	# HA definitions
	hatxt=self.dHABox.GetValue()
	# Ion definitions
	iontxt=self.dIonBox.GetValue()
	# Crystal size
	csizetxt=self.dCrySizeBox.GetValue()
	h,v,d=self.extractCrySize(csizetxt)
	# Beam size
	bsizetxt=self.dBeamSizeBox.GetValue()
	hbeam,vbeam=self.extractBeamSize(bsizetxt)

	# Solvent fraction
	solfrac=float(self.dSolventFractionBox.GetValue())
	solfrac=solfrac/100.0
	
	# Photon flux 
	flux=float(self.dFluxBox.GetValue())
	# wavelength
	wave=float(self.dWLBox.GetValue())
	energy=12.3984/wave

	## Raddose setting
	rd.setEnergy(energy)
	rd.setFlux(flux)
	rd.setHbeam(hbeam)
	rd.setVbeam(vbeam)
	rd.setCell(cell)
	rd.setHATText(hatxt)
	rd.setIonText(iontxt)
	print h,v,d
	rd.setCrySize(h,v,d)
	rd.setSolvent(solfrac)

	# Making com file
	comf="./rad.com"
	logf="./rad.log"
	#print comf,logf
	rd.makeCom(comf,logf)
	rd.execute(comf)
	dose,temp,abscoeff=rd.getDose(logf)

	## Display log
	self.dDoseDisp.SetValue("%5.2f"%dose)
	self.dTempRiseDisp.SetValue("%5.2f"%temp)
	self.dAbsDisp.SetValue("%7.2f"%abscoeff)

	## Henderson limit
	nhenderson=20.0/dose
        self.toHendersonLimitBox.SetValue("%5.2f"%nhenderson)
	self.dTempRiseDisp.SetValue("%5.2f"%temp)

    def pushEstimateFinal(self, event): # wxGlade: MyFrame2.<event_handler>
	dose_per_sec=float(self.dDoseDisp.GetValue())
	desired_dose=float(self.dDesiredDoseBox.GetValue())

	#print "TESTESTES"
	#print self.dispARDbox.GetValue()

	if self.dispARDbox.GetValue()!="":
		lin=self.dispARDbox.GetValue()
		lin=lin.replace("("," ").replace(")"," ")
		cols=lin.split()
		maxrdfac=float(cols[1])
		#print maxrdfac
		self.dMaxRDBox.SetValue("%5.2f"%maxrdfac)
	else:
		maxrdfac=float(self.dMaxRDBox.GetValue())

	final_att_fac=desired_dose/maxrdfac/dose_per_sec*100.0
	self.dAttFactorBox.SetValue("%5.1f [percent]"%final_att_fac)

    def pushChooseDirectoryButton(self, event): # wxGlade: MyFrame2.<event_handler>
        dialog = wx.DirDialog(None, "Choose a directory:",  defaultPath=self.direBox.GetValue(), style=wx.DD_DEFAULT_STYLE | wx.DD_NEW_DIR_BUTTON)
        if dialog.ShowModal() == wx.ID_OK:
            datadir=dialog.GetPath()+"/"
	    self.direBox.SetValue(datadir)
            dialog.Destroy()

    def OnAppendMulti(self, event): # wxGlade: MyFrame2.<event_handler>
        nlist=self.list_ctrl_1.GetItemCount()

        for idx in arange(0,nlist):
                comment=self.list_ctrl_1.GetItem(idx,0).GetText()
                xstr=self.list_ctrl_1.GetItem(idx,1).GetText()
                ystr=self.list_ctrl_1.GetItem(idx,2).GetText()
                zstr=self.list_ctrl_1.GetItem(idx,3).GetText()
                pstr=self.list_ctrl_1.GetItem(idx,4).GetText()
        
                xmm=float(xstr)
                ymm=float(ystr)
                zmm=float(zstr)
                pvalue=float(pstr)

		print comment,xmm,ymm,zmm,pvalue

                self.list_multi.InsertStringItem(0,comment)
                self.list_multi.SetStringItem(0,1,xstr)
                self.list_multi.SetStringItem(0,2,ystr)
                self.list_multi.SetStringItem(0,3,zstr)
                self.list_multi.SetStringItem(0,4,pstr)

    def OnCurrPhiMulti(self, event): # wxGlade: MyFrame2.<event_handler>
        phi="%8.1f"%self.gonio.getPhi()
        self.midphi_multi.SetValue(phi)

    def pushChoDire(self, event): # wxGlade: MyFrame2.<event_handler>
        #app = wx.PySimpleApp()
	dname=self.multi_dire_box.GetValue()
        dialog = wx.DirDialog(None, "Choose a directory:",style=wx.DD_DEFAULT_STYLE | wx.DD_NEW_DIR_BUTTON)
        if dialog.ShowModal() == wx.ID_OK:
            dname=dialog.GetPath()
        self.multi_dire_box.SetValue(dname)
        dialog.Destroy()

    def genMulti(self, event): # wxGlade: MyFrame2.<event_handler>
	self.logfile.write("===KUMA.genMulti was called====\n")
	# Conditions: 
	# dist,midphi,oscwid,oscrange,exp_lifetime,wl,exp_time_each
	# 160512 exp_time_each is added
        conditions=self.readMultiCondition()

	startphi,endphi,best_thick=self.resetMultiCondition(conditions)

	# PREFIX
        prefix=self.prefix_box_multi.GetValue()
        # InfoList
        info_list=[]

	# Generating schedule file
        mlc=MultiCrystalZoo()
        nlist=self.list_multi.GetItemCount()
  
        for idx in arange(0,nlist):
                xstr=self.list_multi.GetItem(idx,1).GetText()
                ystr=self.list_multi.GetItem(idx,2).GetText()
                zstr=self.list_multi.GetItem(idx,3).GetText()

                xmm=float(xstr)
                ymm=float(ystr)
                zmm=float(zstr)
		llll=prefix,xmm,ymm,zmm
                info_list.append(llll)

	# Data directory
	outdir=self.multi_dire_box.GetValue()
	# Conditions
	dist,midphi,oscwid,oscrange,exp_lifetime,wl,exp_time_each,bs_index=conditions
	# Set exposure time 160512 K.Hirata
	mlc.setExpTime(exp_time_each)
        mlc.makeGUI(outdir,wl,info_list,dist,startphi,endphi,oscwid,best_thick,bs_index+1)

	# LOGFILE
	nowt=datetime.datetime.now()
	self.logfile.write("%s: ncrystal=%10d outdir=%s\n"%(nowt,nlist,outdir))
	self.logfile.flush()

    def readMultiCondition(self):
	# Read values
        dist=float(self.cl_multi.GetValue())

	# Firstly read midphi angle
	curr_phi=self.gonio.getPhi()
        phi="%8.1f"%curr_phi
        self.midphi_multi.SetValue(phi)
        midphi=float(self.midphi_multi.GetValue())
        oscwid=float(self.osc_wid_multi.GetValue())
        oscrange=float(self.total_osc_multi.GetValue())

	en=self.mono.getE()
	wl=12.3984/en

	# Convert dose limit to limit-exposure time
	# RADDOSE to estimate dose for this beam parameters
	# Recommended exposure time for multi data collection is 10 MGy 170510
	rad=Raddose()
        # Beamsize index get
	# Beam size
        bs_index=self.beamsizePullDown2.GetCurrentSelection()
	print "Beam size index=",bs_index
        flux=self.flux_list[bs_index]
        beamh_um,beamv_um=self.bsconf.getBeamsizeAtIndex(bs_index)
	# Flux values in different energies vary 
	# In future, flux at each energy should be referred.
	tmp_exp_time=1.0
        dose=rad.getDose(beamh_um,beamv_um,flux,tmp_exp_time,energy=en)
	print "DOSE=",dose
        dose_limit=float(self.dose_box.GetValue()) # unit MGy
        exp_lifetime=dose_limit/dose
	# Setting the FF limit time for the conditions
	self.FFexptimeBox.SetValue("%6.3f"%exp_lifetime)

	# Dose box color setting
        if dose_limit > 15.0:
                self.dose_box.SetBackgroundColour('RED')
        elif dose_limit > 10.0:
                self.dose_box.SetBackgroundColour('YELLOW')
        else:
        	self.dose_box.SetBackgroundColour('GREEN')

	exp_time_each=float(self.exptime_for_each.GetValue())

	# LOGFILE
	nowt=datetime.datetime.now()
        self.logfile.write("%s: WL=%8.5f Beam %5.2f %5.2f um^2 DoseLimit=%5.3f\n"\
		%(nowt,wl,beamh_um,beamv_um,dose_limit))
	self.logfile.flush()

	return dist,midphi,oscwid,oscrange,exp_lifetime,wl,exp_time_each,bs_index

    def resetMultiCondition(self,conditions):
	dist,midphi,oscwid,oscrange,exp_lifetime,wl,exp_time_each,bs_index=conditions

        # # of crystals
        nlist=self.list_multi.GetItemCount()
	tmpstr="%d"%int(nlist)
	self.ncry_box_multi.SetValue(tmpstr)
	print "%5d crystals"%nlist

	# # of frames
	nframe=int(oscrange/oscwid)

	# Wavelength
	www="%12.5f"%wl
	self.wl_box_multi.SetValue(www)

	# Condition setting
	half_wedge=oscrange/2.0
	startphi=midphi-half_wedge
	endphi=midphi+half_wedge
	sphistr="%5.1f"%startphi
	ephistr="%5.1f"%endphi
	self.startphi_multi.SetValue(sphistr)
	self.end_phi_multi.SetValue(ephistr)

        #Attenuator thickness
        # exptime T[sec]: meaning
        # Full flux x T[sec] exposure = Total exposure time for this crystal
        # Attenuator thickness
        attfac=AttFactor()

	# Exposure time for 1 degree oscillation
	exp_per_1deg=exp_lifetime/oscrange 
	print "EXP PER 1DEG = ",exp_per_1deg

	total_exp_time=exp_time_each*float(nframe)
	evalue="%5.3f"%(total_exp_time)
	self.totalExpMultiBox.SetValue(evalue)

	# Exposure time for each frame
	exp_per_frame_ideal=oscwid*exp_per_1deg
	print "EXP PER FRAME IDEAL= ",exp_per_frame_ideal

	# Transmission
	obj_trans=exp_per_frame_ideal/exp_time_each
	print "OBJ TRANS=",obj_trans

        best_thick=self.attfac.getBestAtt(wl,obj_trans)
        print "Suggested Al thickness = %8.1f[um]"%best_thick
        att_idx=attfac.getAttIndexConfig(best_thick)
	attstr="%5d"%int(best_thick)
	self.att_thick_multi.SetValue(attstr)

        # Around flux
        att_fac_final=self.attfac.calcAttFac(wl,best_thick)
	print "FINAL ATT=",att_fac_final
        bs_index=self.beamsizePullDown2.GetCurrentSelection()
        flux=self.flux_list[bs_index]
	print "FLUX=%e",flux
	flux_per_deg=flux*total_exp_time/oscrange*att_fac_final
        flux_str="%5.2e"%flux_per_deg
        self.phsPerDegBoxMulti.SetValue(flux_str)

	# For EIGER settings resolution
	detectordim=233.2 #[mm in shorter dimension]
        twotheta=math.atan((detectordim/2.0)/dist)
        theta=twotheta/2.0
        maxd=wl/2.0/math.sin(theta)
        maxdstr="%8.2f"%maxd
        self.edge_res_multi.SetValue(maxdstr)

	# LOGFILE
        nowt=datetime.datetime.now()
        self.logfile.write("%s: Flux %5.2e\n"%(nowt,flux))
        self.logfile.write("%s: suggested Al thickness %8.1f\n"%(nowt,best_thick))
        self.logfile.flush()

	return startphi,endphi,best_thick

    def chkMulti(self, event): # wxGlade: MyFrame2.<event_handler>
        conditions=self.readMultiCondition()
	self.resetMultiCondition(conditions)

	dist,midphi,oscwid,oscrange,exp_lifetime,wl,exp_time_each,bs_index=self.readMultiCondition()
	print dist,midphi,oscwid,oscrange,exp_lifetime,wl,exp_time_each,bs_index

    def pushGetWL(self, event): # wxGlade: MyFrame2.<event_handler>
	e=self.mono.getE()
	wl=12.3984/e
	wl_str="%8.4f"%wl
        self.wavelengthBox.SetValue(wl_str)

    def isShutteless(self, event): # wxGlade: MyFrame2.<event_handler>
        print "Event handler `isShutteless' not implemented"
        event.Skip()

# end of class My%Frame2

if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()

    frame_3 = MyFrame2(None, -1, "")
    app.SetTopWindow(frame_3)
    frame_3.Show()
    app.MainLoop()
